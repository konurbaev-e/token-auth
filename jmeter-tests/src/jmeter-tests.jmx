<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Admin Parameters" enabled="true">
        <collectionProp name="UserParameters.names">
          <stringProp name="90496154">objectid</stringProp>
          <stringProp name="112803">rev</stringProp>
          <stringProp name="111421">pwd</stringProp>
          <stringProp name="108695229">roles</stringProp>
        </collectionProp>
        <collectionProp name="UserParameters.thread_values">
          <collectionProp name="1705648041">
            <stringProp name="3599307">user</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="1216985755">password</stringProp>
            <stringProp name="-1514914082">admin, authorized</stringProp>
          </collectionProp>
        </collectionProp>
        <boolProp name="UserParameters.per_iteration">false</boolProp>
      </UserParameters>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Predefined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="apiPath" elementType="Argument">
            <stringProp name="Argument.name">apiPath</stringProp>
            <stringProp name="Argument.value">/api</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">localhost</stringProp>
        <stringProp name="HTTPSampler.port">8080</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">ru,en-US;q=0.8,en;q=0.6</stringProp>
          </elementProp>
          <elementProp name="Origin" elementType="Header">
            <stringProp name="Header.name">Origin</stringProp>
            <stringProp name="Header.value">chrome-extension://fhjcajmcbmldlhcimfajhfbgofnpcjmb</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">*/*</stringProp>
          </elementProp>
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.65 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers"/>
      </HeaderManager>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="LOCAL:JDBC/postgres !!!" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">postgresDB</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://localhost:5434/postgres</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">admin</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">postgres</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="LOCAL:JDBC/ankey !!!" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">ankeyDB</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://localhost:5432/ankey</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">ankey</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">ankey</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DROP DB + CREATING NEW USER" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1444140864000</longProp>
        <longProp name="ThreadGroup.end_time">1444140864000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">очищаем БД, затем создаем пользователя с админскими правами</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BEGIN" enabled="true">
          <stringProp name="BeanShellSampler.query">System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; S T A R T &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="KILL APP" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="APP:kill" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

Failure = false;
try {

	Runtime rt = Runtime.getRuntime();
	Process proc = rt.exec(&quot;tasklist /nh /fi \&quot;Windowtitle eq OpenIDM\&quot;&quot;);
	InputStream stdin = proc.getInputStream();
	InputStreamReader isr = new InputStreamReader(stdin);
	BufferedReader br = new BufferedReader(isr);
	String line = null;

	Pattern pattern = Pattern.compile(&quot;\\d+&quot;);
	while ((line = br.readLine()) != null) {
		//System.out.println(line);
		Matcher matcher = pattern.matcher(line);
		if (matcher.find(0)) {
			String value = line.substring(matcher.start(), matcher.end());
			int PID = Integer.parseInt(value);
			//System.out.println(&quot;PID: &quot; + PID);
			rt.exec(&quot;taskkill /pid &quot; + PID);
		}else{
			Failure = true;
			FailureMessage = &quot;PID not found.&quot;;
		}
	}
	
} catch (Throwable t) {
	t.printStackTrace();
	Failure = true;
	FailureMessage = &quot;TROWABLE: &quot; + t.getMessage();
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.PREPARE DB" enabled="true">
          <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.1.postgres disconnect" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB:disconnect" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="query"> SELECT pg_terminate_backend(pg_stat_activity.pid)
 FROM pg_stat_activity
 WHERE pg_stat_activity.datname = &apos;${dbName}&apos;
 AND pid &lt;&gt; pg_backend_pid();</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">if (!&quot;200&quot;.equals(prev.getResponseCode())){
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.2.postgres drop db " enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB:drop" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="query">DROP DATABASE IF EXISTS ${dbName};</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">if (!&quot;200&quot;.equals(prev.getResponseCode())){
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}CheckDrop" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT count(*) FROM pg_database where datname = &apos;${dbName}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">is${dbName}</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertionDrop" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;

String EXPECTED_COUNT = &quot;0&quot;;
Failure = false;

String resultVarName = &quot;is&quot;+vars.get(&quot;dbName&quot;);
String cntAdmin = vars.getObject(resultVarName).get(0).get(&quot;count&quot;).toString();

if (!EXPECTED_COUNT.equals(cntAdmin)) {
	System.err.println(&quot;ACTUAL_COUNT: &quot; + internaluserResultCount);
	System.err.println(&quot;EXPECTED_COUNT: &quot; + EXPECTED_COUNT);
	Failure = true;
	FailureMessage = &quot;ACTUAL_COUNT != EXPECTED_COUNT&quot;;
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.3.postgres create user" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="USER:creation" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="query">create user ${dbOwner} with password &apos;${dbOwner}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&quot;# # # ResponseCode = [&quot;+prev.getResponseCode()+&quot;]&quot;);

if ( !( prev.getResponseCode().contains(&quot;42710&quot;) || &quot;200&quot;.equals(prev.getResponseCode()) ) ){
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}else{
	prev.setResponseOK();
}
log.info(&quot;# # # FatalError = [&quot;+vars.get(&quot;FatalError&quot;)+&quot;]&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}CheckUser" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select count(*) from pg_user where pg_user.usename=&apos;${dbOwner}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">is${dbOwner}</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertionUser" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;

String EXPECTED_COUNT = &quot;1&quot;;
Failure = false;

String resultVarName = &quot;is&quot;+vars.get(&quot;dbOwner&quot;);
String cntAdmin = vars.getObject(resultVarName).get(0).get(&quot;count&quot;).toString();

if (!EXPECTED_COUNT.equals(cntAdmin)) {
	System.err.println(&quot;ACTUAL_COUNT: &quot; + internaluserResultCount);
	System.err.println(&quot;EXPECTED_COUNT: &quot; + EXPECTED_COUNT);
	Failure = true;
	FailureMessage = &quot;ACTUAL_COUNT != EXPECTED_COUNT&quot;;
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.4.postgres create db" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB:creation" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="query">create database ${dbName} encoding &apos;utf8&apos; owner ${dbOwner};</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}CheckDB" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT count(*) FROM pg_database where datname = &apos;${dbName}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">is${dbName}</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertionDB" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;

String EXPECTED_COUNT = &quot;1&quot;;
Failure = false;

String resultVarName = &quot;is&quot;+vars.get(&quot;dbName&quot;);
String cntAdmin = vars.getObject(resultVarName).get(0).get(&quot;count&quot;).toString();

if (!EXPECTED_COUNT.equals(cntAdmin)) {
	System.err.println(&quot;ACTUAL_COUNT: &quot; + internaluserResultCount);
	System.err.println(&quot;EXPECTED_COUNT: &quot; + EXPECTED_COUNT);
	Failure = true;
	FailureMessage = &quot;ACTUAL_COUNT != EXPECTED_COUNT&quot;;
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.5.postgres set grant" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="USER:grant" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="query">grant all privileges on database ${dbName} to ${dbOwner};</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//log.info(&quot;# # # ResponseCode = [&quot;+prev.getResponseCode()+&quot;]&quot;);

if ( !&quot;200&quot;.equals(prev.getResponseCode()) ){
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}else{
	prev.setResponseOK();
}

//log.info(&quot;# # # FatalError = [&quot;+vars.get(&quot;FatalError&quot;)+&quot;]&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}CheckGrant" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT has_database_privilege FROM has_database_privilege(&apos;${dbName}&apos;, &apos;${dbOwner}&apos;, &apos;connect&apos;);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">privilege</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertionGrant" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;

String EXPECTED_COUNT = &quot;true&quot;;
Failure = false;

String isPrivilege = vars.getObject(&quot;privilege&quot;).get(0).get(&quot;has_database_privilege&quot;).toString();
log.info(&quot;# # # isPrivilege = [&quot;+isPrivilege+&quot;]&quot;);
if (!EXPECTED_COUNT.equals(isPrivilege)) {
	System.err.println(&quot;ACTUAL_COUNT: &quot; + internaluserResultCount);
	System.err.println(&quot;EXPECTED_COUNT: &quot; + EXPECTED_COUNT);
	Failure = true;
	FailureMessage = &quot;ACTUAL_COUNT != EXPECTED_COUNT&quot;;
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.6.openidm disconnect" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB:disconnect" enabled="true">
              <stringProp name="dataSource">ankeyDB</stringProp>
              <stringProp name="query"> SELECT pg_terminate_backend(pg_stat_activity.pid)
 FROM pg_stat_activity
 WHERE pg_stat_activity.datname = &apos;${dbName}&apos;
 AND pid &lt;&gt; pg_backend_pid();
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.7.openidm create extension" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB:creationExt" enabled="true">
              <stringProp name="dataSource">ankeyDB</stringProp>
              <stringProp name="query">CREATE EXTENSION pg_trgm;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}CheckExt" enabled="true">
              <stringProp name="dataSource">ankeyDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select count(*) from pg_extension where extname = &apos;${extPgTrgm}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">is${extPgTrgm}</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertionExt" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;

String EXPECTED_COUNT = &quot;1&quot;;
Failure = false;

String resultVarName = &quot;is&quot;+vars.get(&quot;extPgTrgm&quot;);
String cntAdmin = vars.getObject(resultVarName).get(0).get(&quot;count&quot;).toString();

if (!EXPECTED_COUNT.equals(cntAdmin)) {
	System.out.println(&quot;ACTUAL_COUNT: &quot; + internaluserResultCount);
	System.out.println(&quot;EXPECTED_COUNT: &quot; + EXPECTED_COUNT);
	Failure = true;
	FailureMessage = &quot;ACTUAL_COUNT != EXPECTED_COUNT&quot;;
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">3000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DROP DB + CREATING NEW USER" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1444140864000</longProp>
        <longProp name="ThreadGroup.end_time">1444140864000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">очищаем БД, затем создаем пользователя с админскими правами</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BEGIN" enabled="true">
          <stringProp name="BeanShellSampler.query">System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; S T A R T &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="KILL APP" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="APP:kill" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

Failure = false;
try {

	Runtime rt = Runtime.getRuntime();
	Process proc = rt.exec(&quot;tasklist /nh /fi \&quot;Windowtitle eq OpenIDM\&quot;&quot;);
	InputStream stdin = proc.getInputStream();
	InputStreamReader isr = new InputStreamReader(stdin);
	BufferedReader br = new BufferedReader(isr);
	String line = null;

	Pattern pattern = Pattern.compile(&quot;\\d+&quot;);
	while ((line = br.readLine()) != null) {
		//System.out.println(line);
		Matcher matcher = pattern.matcher(line);
		if (matcher.find(0)) {
			String value = line.substring(matcher.start(), matcher.end());
			int PID = Integer.parseInt(value);
			//System.out.println(&quot;PID: &quot; + PID);
			rt.exec(&quot;taskkill /pid &quot; + PID);
		}else{
			Failure = true;
			FailureMessage = &quot;PID not found.&quot;;
		}
	}
	
} catch (Throwable t) {
	t.printStackTrace();
	Failure = true;
	FailureMessage = &quot;TROWABLE: &quot; + t.getMessage();
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.PREPARE DB" enabled="true">
          <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.1.postgres disconnect" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB:disconnect" enabled="false">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="query"> SELECT pg_terminate_backend(pg_stat_activity.pid)
 FROM pg_stat_activity
 WHERE pg_stat_activity.datname = &apos;${dbName}&apos;
 AND pid &lt;&gt; pg_backend_pid();</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">if (!&quot;200&quot;.equals(prev.getResponseCode())){
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.2.postgres drop db " enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB:drop" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="query">DROP DATABASE IF EXISTS ${dbName};</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">if (!&quot;200&quot;.equals(prev.getResponseCode())){
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}CheckDrop" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT count(*) FROM pg_database where datname = &apos;${dbName}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">is${dbName}</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertionDrop" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;

String EXPECTED_COUNT = &quot;0&quot;;
Failure = false;

String resultVarName = &quot;is&quot;+vars.get(&quot;dbName&quot;);
String cntAdmin = vars.getObject(resultVarName).get(0).get(&quot;count&quot;).toString();

if (!EXPECTED_COUNT.equals(cntAdmin)) {
	System.err.println(&quot;ACTUAL_COUNT: &quot; + internaluserResultCount);
	System.err.println(&quot;EXPECTED_COUNT: &quot; + EXPECTED_COUNT);
	Failure = true;
	FailureMessage = &quot;ACTUAL_COUNT != EXPECTED_COUNT&quot;;
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.3.postgres create user" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="USER:creation" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="query">create user ${dbOwner} with password &apos;${dbOwner}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&quot;# # # ResponseCode = [&quot;+prev.getResponseCode()+&quot;]&quot;);

if ( !( prev.getResponseCode().contains(&quot;42710&quot;) || &quot;200&quot;.equals(prev.getResponseCode()) ) ){
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}else{
	prev.setResponseOK();
}
log.info(&quot;# # # FatalError = [&quot;+vars.get(&quot;FatalError&quot;)+&quot;]&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}CheckUser" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select count(*) from pg_user where pg_user.usename=&apos;${dbOwner}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">is${dbOwner}</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertionUser" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;

String EXPECTED_COUNT = &quot;1&quot;;
Failure = false;

String resultVarName = &quot;is&quot;+vars.get(&quot;dbOwner&quot;);
String cntAdmin = vars.getObject(resultVarName).get(0).get(&quot;count&quot;).toString();

if (!EXPECTED_COUNT.equals(cntAdmin)) {
	System.err.println(&quot;ACTUAL_COUNT: &quot; + internaluserResultCount);
	System.err.println(&quot;EXPECTED_COUNT: &quot; + EXPECTED_COUNT);
	Failure = true;
	FailureMessage = &quot;ACTUAL_COUNT != EXPECTED_COUNT&quot;;
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.4.postgres create db" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB:creation" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="query">create database ${dbName} encoding &apos;utf8&apos; owner ${dbOwner};</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}CheckDB" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT count(*) FROM pg_database where datname = &apos;${dbName}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">is${dbName}</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertionDB" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;

String EXPECTED_COUNT = &quot;1&quot;;
Failure = false;

String resultVarName = &quot;is&quot;+vars.get(&quot;dbName&quot;);
String cntAdmin = vars.getObject(resultVarName).get(0).get(&quot;count&quot;).toString();

if (!EXPECTED_COUNT.equals(cntAdmin)) {
	System.err.println(&quot;ACTUAL_COUNT: &quot; + internaluserResultCount);
	System.err.println(&quot;EXPECTED_COUNT: &quot; + EXPECTED_COUNT);
	Failure = true;
	FailureMessage = &quot;ACTUAL_COUNT != EXPECTED_COUNT&quot;;
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.5.postgres set grant" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="USER:grant" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="query">grant all privileges on database ${dbName} to ${dbOwner};</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//log.info(&quot;# # # ResponseCode = [&quot;+prev.getResponseCode()+&quot;]&quot;);

if ( !&quot;200&quot;.equals(prev.getResponseCode()) ){
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}else{
	prev.setResponseOK();
}

//log.info(&quot;# # # FatalError = [&quot;+vars.get(&quot;FatalError&quot;)+&quot;]&quot;);
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}CheckGrant" enabled="true">
              <stringProp name="dataSource">postgresDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT has_database_privilege FROM has_database_privilege(&apos;${dbName}&apos;, &apos;${dbOwner}&apos;, &apos;connect&apos;);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">privilege</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertionGrant" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;

String EXPECTED_COUNT = &quot;true&quot;;
Failure = false;

String isPrivilege = vars.getObject(&quot;privilege&quot;).get(0).get(&quot;has_database_privilege&quot;).toString();
log.info(&quot;# # # isPrivilege = [&quot;+isPrivilege+&quot;]&quot;);
if (!EXPECTED_COUNT.equals(isPrivilege)) {
	System.err.println(&quot;ACTUAL_COUNT: &quot; + internaluserResultCount);
	System.err.println(&quot;EXPECTED_COUNT: &quot; + EXPECTED_COUNT);
	Failure = true;
	FailureMessage = &quot;ACTUAL_COUNT != EXPECTED_COUNT&quot;;
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.6.ankey disconnect" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB:disconnect" enabled="true">
              <stringProp name="dataSource">ankeyDB</stringProp>
              <stringProp name="query"> SELECT pg_terminate_backend(pg_stat_activity.pid)
 FROM pg_stat_activity
 WHERE pg_stat_activity.datname = &apos;${dbName}&apos;
 AND pid &lt;&gt; pg_backend_pid();
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="1.7.ankey create extension" enabled="true">
            <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB:creationExt" enabled="true">
              <stringProp name="dataSource">ankeyDB</stringProp>
              <stringProp name="query">CREATE EXTENSION pg_trgm;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}CheckExt" enabled="true">
              <stringProp name="dataSource">ankeyDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select count(*) from pg_extension where extname = &apos;${extPgTrgm}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">is${extPgTrgm}</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertionExt" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;

String EXPECTED_COUNT = &quot;1&quot;;
Failure = false;

String resultVarName = &quot;is&quot;+vars.get(&quot;extPgTrgm&quot;);
String cntAdmin = vars.getObject(resultVarName).get(0).get(&quot;count&quot;).toString();

if (!EXPECTED_COUNT.equals(cntAdmin)) {
	System.out.println(&quot;ACTUAL_COUNT: &quot; + internaluserResultCount);
	System.out.println(&quot;EXPECTED_COUNT: &quot; + EXPECTED_COUNT);
	Failure = true;
	FailureMessage = &quot;ACTUAL_COUNT != EXPECTED_COUNT&quot;;
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">3000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Requests thread group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1444216486000</longProp>
        <longProp name="ThreadGroup.end_time">1444216486000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">подготовка окружения</stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DROP CONSTRAIT" enabled="false">
          <stringProp name="dataSource">openidmDB</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">ALTER TABLE request ALTER COLUMN status DROP NOT NULL;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ResourceCreating(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;restype_rev&quot;: &quot;0&quot;,&#xd;
	&quot;restype_id&quot;: 1,&#xd;
	&quot;connector_id&quot;: 1,&#xd;
	&quot;resName&quot;: &quot;XML1&quot;,&#xd;
	&quot;resDesc&quot;: &quot;XML File&quot;,&#xd;
	&quot;resBody&quot;: {&#xd;
		&quot;xsdIcfFilePath&quot;: &quot;&amp;{launcher.project.location}/data/resource-schema-1.xsd&quot;,&#xd;
		&quot;xsdFilePath&quot;: &quot;&amp;{launcher.project.location}/data/resource-schema-extension.xsd&quot;,&#xd;
		&quot;xmlFilePath&quot;: &quot;&amp;{launcher.project.location}/data/xmlConnectorData.xml&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resource?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ResourceCreatingLDAP(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;resName&quot;: &quot;10.0.101.90&quot;,&#xd;
    &quot;restype_id&quot;: 2,&#xd;
    &quot;restype_rev&quot;: &quot;0&quot;,&#xd;
    &quot;connector_id&quot;: 2&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resource?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EntitlementCreating(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;entCode&quot;:&quot;gr=nb&quot;,&#xd;
 &quot;entName&quot;:&quot;test&quot;,&#xd;
 &quot;entType&quot;:&quot;ADGroup&quot;,&#xd;
 &quot;resource_id&quot;:1&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/entitlement?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EntitlementCreating2(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;entCode&quot;:&quot;gr=er&quot;,&#xd;
 &quot;entName&quot;:&quot;test&quot;,&#xd;
 &quot;entType&quot;:&quot;ADGroup&quot;,&#xd;
 &quot;resource_id&quot;:1&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/entitlement?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ResformCreating(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;resFormName&quot;:&quot;2&quot;,&quot;resFormDesc&quot;:&quot;&quot;,&quot;resFormTable&quot;:&quot;rf_2&quot;,&quot;resFormBody&quot;:{&quot;properties&quot;:{&quot;2&quot;:{&quot;fieldType&quot;:&quot;textField&quot;,&quot;displayName&quot;:&quot;2&quot;,&quot;maxLength&quot;:80}},&quot;order&quot;:[&quot;2&quot;]}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resform?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MappingCreating(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;mapName&quot;: &quot;update_ldap_to_xml&quot;,&#xd;
  &quot;mapType&quot;: &quot;update&quot;,&#xd;
  &quot;mapDesc&quot;: &quot;update ldap_to_xml&quot;,&#xd;
  &quot;mapSource&quot;: &quot;resform/rf_aduser&quot;,&#xd;
  &quot;mapTarget&quot;: &quot;resform/rf_xml&quot;,&#xd;
  &quot;mapBody&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
&#xd;
      {&#xd;
        &quot;action&quot;: &quot;CREATE&quot;,&#xd;
        &quot;situation&quot;: &quot;ABSENT&quot;&#xd;
      }&#xd;
&#xd;
    ],&#xd;
    &quot;properties&quot;: [&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;givenname&quot;,&#xd;
        &quot;target&quot;: &quot;password&quot;&#xd;
      },&#xd;
	  &#xd;
      {&#xd;
        &quot;source&quot;: &quot;givenname&quot;,&#xd;
        &quot;target&quot;: &quot;fio&quot;&#xd;
      },	    	  &#xd;
	        {&#xd;
        &quot;source&quot;: &quot;givenname&quot;,&#xd;
        &quot;target&quot;: &quot;login&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ResaccountCreating(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;resAccName&quot;:&quot;XML_File&quot;,&#xd;
&quot;resAccDesc&quot;: &quot;Список пользователей в XML файле&quot;,&#xd;
&quot;beneficiarObject&quot;:&quot;managed/user&quot;,&#xd;
&quot;resource_id&quot;:1,&#xd;
&quot;resform_id&quot;:1,&#xd;
&quot;connectorObjectType&quot;:&quot;account&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resaccount?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RequestCreating(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;entity&quot;: &quot;managed/usrapprole&quot;,&#xd;
 &quot;action&quot;: &quot;create&quot;,&#xd;
 &quot;processinstance_id&quot;:2,&#xd;
 &quot;requestBody&quot;: {},&#xd;
 &quot;requestForm&quot;: {&#xd;
  &quot;comment&quot;: &quot;test&quot;&#xd;
 }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/request?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Asserrtion PositiveRequest" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
String processInstanceid=getResponseDataAsString(_id)
log.info(&quot;Instanceid-&quot;+_id)
/*if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserCreating(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
{&quot;userName&quot;:&quot;testUser1&quot;,&#xd;
&quot;mail&quot;:&quot;testUser1@gaz-is.ru&quot;,&#xd;
&quot;lastName&quot;:&quot;Морковкин&quot;,&#xd;
&quot;firstName&quot;:&quot;Степан&quot;,&#xd;
&quot;middleName&quot;:&quot;Юрьевич&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/user?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MappingCreating6Step(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;mapName&quot;: &quot;prepop_rf_aduser&quot;,&#xd;
  &quot;mapType&quot;: &quot;create&quot;,&#xd;
  &quot;mapDesc&quot;: &quot;managed_user_to_rf_aduser to xml&quot;,&#xd;
  &quot;mapSource&quot;: &quot;managed/user&quot;,&#xd;
  &quot;mapTarget&quot;: &quot;resform/rf_aduser&quot;,&#xd;
  &quot;mapBody&quot;: {&#xd;
    &quot;policies&quot;: [],&#xd;
    &quot;properties&quot;: [&#xd;
      {&#xd;
        &quot;source&quot;: &quot;&quot;,&#xd;
        &quot;target&quot;: &quot;login&quot;,&#xd;
        &quot;transform&quot;: {&#xd;
          &quot;type&quot;: &quot;text/javascript&quot;,&#xd;
          &quot;source&quot;: &quot;source.userName&quot;&#xd;
        }&#xd;
      },&#xd;
      {&#xd;
        &quot;source&quot;: &quot;&quot;,&#xd;
        &quot;target&quot;: &quot;password&quot;,&#xd;
        &quot;transform&quot;: {&#xd;
          &quot;type&quot;: &quot;text/javascript&quot;,&#xd;
          &quot;source&quot;: &quot;source.userName+&apos;-password&apos;&quot;&#xd;
        }&#xd;
      },	  &#xd;
      {&#xd;
        &quot;source&quot;: &quot;&quot;,&#xd;
        &quot;target&quot;: &quot;fio&quot;,&#xd;
        &quot;transform&quot;: {&#xd;
          &quot;type&quot;: &quot;text/javascript&quot;,&#xd;
          &quot;source&quot;: &quot;source.lastName+&apos; &apos;+source.firstName+&apos; &apos;+source.middleName&quot;&#xd;
        }&#xd;
      },&#xd;
      {&#xd;
        &quot;source&quot;: &quot;_id&quot;,&#xd;
        &quot;target&quot;: &quot;_id&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RoleCreating(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;appRoleName&quot;:&quot;1&quot;,&quot;appRoleDesc&quot;:&quot;1&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/approle?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User2Creating(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;userName&quot;: &quot;4&quot;, &quot;mail&quot;: &quot;4@q&quot;, &quot;firstName&quot;: &quot;w&quot;, &quot;lastName&quot;: &quot;e&quot;, &quot;middleName&quot;: &quot;r&quot;, &quot;password&quot;: &quot;t&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/user?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AssignRoleToUser(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;arrayObjects&quot;: [{&quot;usr_id&quot;:1, &quot;approle_id&quot;:1}]}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/usrapprole?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GetUserName" enabled="false">
          <stringProp name="dataSource">openidmDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT username FROM openidm.usr order by id asc LIMIT 1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultset</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
          <stringProp name="TestPlan.comments">вытаскиваем первого пользователя из таблицы для назначения ему учетной записи</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="AssertGetUserName" enabled="true">
            <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

Failure = false;

try {  
	String username = vars.getObject(&quot;resultset&quot;).get(0).get(&quot;username&quot;).toString();
	vars.put(&quot;userName&quot;, username);	 
	System.out.println(&quot;@ @ @ username: &gt;&quot; + vars.get(&quot;userName&quot;) + &quot;&lt;&quot;);
	
} catch (Throwable t) {
	vars.put(&quot;userName&quot;, &quot;&quot;);	 
	Failure = true;
	FailureMessage = &quot;TROWABLE: &quot; + t.getMessage();
	System.err.println(FailureMessage);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GetResaccountID" enabled="false">
          <stringProp name="dataSource">openidmDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT id FROM openidm.resaccount  order by id asc LIMIT 1
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultset</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
          <stringProp name="TestPlan.comments">вытаскиваем ресаккаунт  для создания учетной записи</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="AssertGetResaccountID" enabled="true">
            <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

Failure = false;

try {  
	String id = vars.getObject(&quot;resultset&quot;).get(0).get(&quot;id&quot;).toString();
	vars.put(&quot;resaccountID&quot;, id);	 
	System.out.println(&quot;@ @ @ id: &gt;&quot; + vars.get(&quot;resaccountID&quot;) + &quot;&lt;&quot;);
	
} catch (Throwable t) {
	vars.put(&quot;resaccountID&quot;,&quot;&quot;);	 
	Failure = true;
	FailureMessage = &quot;TROWABLE: &quot; + t.getMessage();
	System.err.println(FailureMessage);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GetBObjectID" enabled="false">
          <stringProp name="dataSource">openidmDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT objectid FROM openidm.usr order by id asc LIMIT 1
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultset</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
          <stringProp name="TestPlan.comments">вытаскиваем бенифициар для создания учетной записи</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="AssertGetBObjectid" enabled="true">
            <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

Failure = false;

try {  
	String objectid = vars.getObject(&quot;resultset&quot;).get(0).get(&quot;objectid&quot;).toString();
	vars.put(&quot;bObjectID&quot;, objectid);	 
	System.out.println(&quot;@ @ @ objectid: &gt;&quot; + vars.get(&quot;bObjectID&quot;) + &quot;&lt;&quot;);
	
} catch (Throwable t) {
	vars.put(&quot;bObjectID&quot;, &quot;&quot;);	 
	Failure = true;
	FailureMessage = &quot;TROWABLE: &quot; + t.getMessage();
	System.err.println(FailureMessage);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Create UZ" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;login&quot;:&quot;${userName}&quot;,&quot;beneficiar_objectid&quot;:&quot;${bObjectID}&quot;,&quot;resaccount_id&quot;:${resaccountID}}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/openidm/resform/rf_aduser?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">создаем учетную запись</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>false</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\TEST\BACKEND\1.xls</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>false</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">C:\TEST\BACKEND\2.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">500</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create user" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1445241222000</longProp>
        <longProp name="ThreadGroup.end_time">1445241222000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="prepare" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.idm.utils.FileReaderWriter;
import org.apache.jmeter.services.FileServer;

vars.put(&quot;report&quot;, FileServer.getFileServer().getBaseDir() + File.separator + &quot;ErrReport.txt&quot;); //_${__time(ddMM_HHmm)}
System.out.println(vars.get(&quot;report&quot;));
FileReaderWriter frw = new FileReaderWriter(vars.get(&quot;report&quot;));


if( &quot;1&quot;.equals(vars.get(&quot;FatalError&quot;)) ){
	String[] atrArr = {&quot;FATAL_ERROR&quot;, &quot;THERE ARE DB OR APP PROBLEMS&quot;};

	frw.writeInfoFile(&quot;\t&quot;, atrArr);
}
//***20.10.2015

//vars.put(&quot;xml-report&quot;, FileServer.getFileServer().getBaseDir() + File.separator + &quot;Report.xml&quot;); //_${__time(ddMM_HHmm)}
///System.out.println(vars.get(&quot;xml-report&quot;));
//FileReaderWriter frw = new FileReaderWriter(vars.get(&quot;xml-report&quot;));


//if( &quot;1&quot;.equals(vars.get(&quot;FatalError&quot;)) ){
	//String[] atrArr = {&quot;FATAL_ERROR&quot;, &quot;THERE ARE DB OR APP PROBLEMS&quot;};

	//*** функция для конвертации из json формата в xml формат	
	//function jsonToXmlString(atrArr) {
    //var xml = &quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&quot;;
 
    //for (var i in atrArr) {
 //       xml += &quot;&lt;&quot; + i + &quot;&gt;&quot; + atrArr[i] + &quot;&lt;/&quot; + i + &quot;&gt;\n&quot;;
//}
 
//    return xml;
//}
 
//alert( jsonToXmlString(atrArr) );
//*
//	frw.writeInfoFile(&quot;\t&quot;, xml);
//}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="5.3.CREATE USER (positive Json)" enabled="true">
          <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop-542" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="TestPlan.comments">Count = количеству строк в input-файле</stringProp>
            <stringProp name="LoopController.loops">542</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name"> csvPositiveUser</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: csvPositiveJson" enabled="true">
              <stringProp name="delimiter">\t</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="filename">userPositiveJsonInput.csv</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">csvPositiveJsonUser</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${objectid}-PositiveCreateUser-${ csvPositiveUser} " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${csvPositiveJsonUser}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/openidm/managed/user?_action=create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-OpenIDM-Username" elementType="Header">
                    <stringProp name="Header.name">X-OpenIDM-Username</stringProp>
                    <stringProp name="Header.value">${objectid}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru,en-US;q=0.8,en;q=0.6</stringProp>
                  </elementProp>
                  <elementProp name="X-OpenIDM-Password" elementType="Header">
                    <stringProp name="Header.name">X-OpenIDM-Password</stringProp>
                    <stringProp name="Header.value">${pwd}</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">chrome-extension://fhjcajmcbmldlhcimfajhfbgofnpcjmb</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.65 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">500</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="5.4.CREATE USER (negative Json)" enabled="false">
          <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop-4" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="TestPlan.comments">Count = количеству строк в input-файле</stringProp>
            <stringProp name="LoopController.loops">4</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name"> csvNegativeUser</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: csvNegativeJson" enabled="true">
              <stringProp name="delimiter">\t\t\t</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="filename">userNegativeJsonInput.csv</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">csvNegativeJsonUser</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${objectid}-NegativeCreateRole-${ csvNegativeUser} " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${csvNegativeJsonUser}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/openidm/managed/user?_action=create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-OpenIDM-Username" elementType="Header">
                    <stringProp name="Header.name">X-OpenIDM-Username</stringProp>
                    <stringProp name="Header.value">${objectid}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru,en-US;q=0.8,en;q=0.6</stringProp>
                  </elementProp>
                  <elementProp name="X-OpenIDM-Password" elementType="Header">
                    <stringProp name="Header.name">X-OpenIDM-Password</stringProp>
                    <stringProp name="Header.value">${pwd}</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">chrome-extension://fhjcajmcbmldlhcimfajhfbgofnpcjmb</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.65 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}CsvAssertionRole-${ csvNegativeUser} " enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.io.IOException;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.util.Iterator;
import com.idm.utils.FileReaderWriter;

String EXPECTED_CODE = &quot;null&quot;;

String responseJsonString = prev.getResponseDataAsString();
System.out.println(&quot;responseJsonString: &quot; + responseJsonString);

Failure = false;

try {          
	JsonParser parser = new JsonParser();
	JsonObject mainObject = parser.parse(responseJsonString).getAsJsonObject();
	String responseCode = &quot;&quot; + mainObject.get(&quot;code&quot;);
	String responseReason = &quot;&quot; + mainObject.get(&quot;reason&quot;);
	String responseMessage = &quot;&quot; + mainObject.get(&quot;message&quot;);
	
	if (EXPECTED_CODE.equalsIgnoreCase(responseCode)) {
		System.err.println(&quot;JSON-REQUEST: &quot; + vars.get(&quot;csvNegativeJson&quot;));
		Failure = true;
		FailureMessage = &quot;NEGATINE TEST WAS VALIDATED&quot;;
	
	}

	JsonObject detail = mainObject.getAsJsonObject(&quot;detail&quot;);
	JsonElement result = detail.get(&quot;result&quot;);
	JsonElement localizedMessage = detail.get(&quot;localizedMessage&quot;);
	JsonElement policyId = detail.get(&quot;policyId&quot;);
	JsonElement resource = detail.get(&quot;resource&quot;);
	JsonElement property = detail.get(&quot;property&quot;);
	JsonElement appErrorCode = detail.get(&quot;appErrorCode&quot;);
	if(/* result == null || */ localizedMessage == null /* || policyId == null || resource == null || property == null || appErrorCode == null */){
		System.err.println(&quot;INCORRECTED DETAIL: &quot; + detail);
		Failure = true;
		FailureMessage = &quot;INCORRECTED DETAIL&quot;;
	
	}

} catch (Throwable t) {
	//t.printStackTrace();
	Failure = true;
	FailureMessage = &quot;TROWABLE: &quot; + t.getMessage();
}

if (Failure) {
	FileReaderWriter frw = new FileReaderWriter(vars.get(&quot;report&quot;));
	String[] atrArr = {&quot;negative&quot;, vars.get(&quot;csvNegativeJsonUser&quot;), responseJsonString};
		

	frw.writeInfoFile(&quot;\t&quot;, atrArr);
} else {
	System.out.println(&quot;SUPPRESSION OF ERRORS&quot;);
	prev.setResponseOK();
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create mapping" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1445241499000</longProp>
        <longProp name="ThreadGroup.end_time">1445241499000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="prepare" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.idm.utils.FileReaderWriter;
import org.apache.jmeter.services.FileServer;

vars.put(&quot;report&quot;, FileServer.getFileServer().getBaseDir() + File.separator + &quot;ErrReport.txt&quot;); //_${__time(ddMM_HHmm)}
System.out.println(vars.get(&quot;report&quot;));
FileReaderWriter frw = new FileReaderWriter(vars.get(&quot;report&quot;));


if( &quot;1&quot;.equals(vars.get(&quot;FatalError&quot;)) ){
	String[] atrArr = {&quot;FATAL_ERROR&quot;, &quot;THERE ARE DB OR APP PROBLEMS&quot;};
		//* функция для конвертации из json формата в xml формат	
	function jsonToXmlString(atrArr) {
    var xml = &quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&quot;;
 
    for (var i in atrArr) {
        xml += &quot;&lt;&quot; + i + &quot;&gt;&quot; + atrArr[i] + &quot;&lt;/&quot; + i + &quot;&gt;\n&quot;;
    }
 
    return xml;
}
 
alert( jsonToXmlString(atrArr) );
//*
	frw.writeInfoFile(&quot;\t&quot;, xml);
}
//***20.10.2015
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="11.1.CREATE MAP (positive Json)" enabled="true">
          <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop-18" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="TestPlan.comments">Count = количеству строк в input-файле</stringProp>
            <stringProp name="LoopController.loops">18</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name"> csvPositive</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: csvPositiveJson" enabled="true">
              <stringProp name="delimiter">\t\t\t</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="filename">mappingPositiveJsonInput.csv</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">csvPositiveJson</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${objectid}-PositiveCreateMap-${ csvPositive} " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${csvPositiveJson}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/openidm/managed/mapping?_action=create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}CsvAssertionRes-${ csvPositive} " enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.io.IOException;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.util.Iterator;
import com.idm.utils.FileReaderWriter;

String responseJsonString = prev.getResponseDataAsString();
System.out.println(&quot;responseJsonString: &quot; + responseJsonString);

Failure = false;

try {        
	JsonParser parser = new JsonParser();
	JsonObject mainObject = parser.parse(responseJsonString).getAsJsonObject();
	
	String responseCode = &quot;&quot; + mainObject.get(&quot;code&quot;);
	String responseReason = &quot;&quot; + mainObject.get(&quot;reason&quot;);
	String responseMessage = &quot;&quot; + mainObject.get(&quot;message&quot;);
	
	if (!&quot;null&quot;.equalsIgnoreCase(responseCode)) {
		System.err.println(&quot;JSON-REQUEST: &quot; + vars.get(&quot;csvPositiveJson&quot;));
		System.err.println(&quot;REASON: &quot; + responseReason);
		System.err.println(&quot;MESSAGE: &quot; + responseMessage);
	
		Failure = true;
		FailureMessage = responseMessage.toUpperCase();
	}
	
} catch (Throwable t) {
	//t.printStackTrace();
	Failure = true;
	FailureMessage = &quot;TROWABLE: &quot; + t.getMessage();
}

if (Failure) {
	FileReaderWriter frw = new FileReaderWriter(vars.get(&quot;report&quot;));
	String[] atrArr = {&quot;FatalError: positive&quot;, vars.get(&quot;csvPositiveJson&quot;), responseJsonString};
		//* функция для конвертации из json формата в xml формат	
	function jsonToXmlString(atrArr) {
    var xml = &quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&quot;;
 
    for (var i in atrArr) {
        xml += &quot;&lt;&quot; + i + &quot;&gt;&quot; + atrArr[i] + &quot;&lt;/&quot; + i + &quot;&gt;\n&quot;;
    }
 
    return xml;
}
 
alert( jsonToXmlString(atrArr) );
//*
	frw.writeInfoFile(&quot;\t&quot;, xml);
	vars.put(&quot;FatalError&quot;,&quot;1&quot;);
}

</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="11.2.CREATE MAP (negative Json)" enabled="true">
          <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop-22" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="TestPlan.comments">Count = количеству строк в input-файле</stringProp>
            <stringProp name="LoopController.loops">22</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name"> csvNegative</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: csvNegativeJson" enabled="true">
              <stringProp name="delimiter">\t\t\t</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="filename">mappingNegativeJsonInput.csv</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">csvNegativeJson</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${objectid}-NegativeCreateMap-${ csvNegative} " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${csvNegativeJson}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/openidm/managed/mapping?_action=create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-OpenIDM-Username" elementType="Header">
                    <stringProp name="Header.name">X-OpenIDM-Username</stringProp>
                    <stringProp name="Header.value">${objectid}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru,en-US;q=0.8,en;q=0.6</stringProp>
                  </elementProp>
                  <elementProp name="X-OpenIDM-Password" elementType="Header">
                    <stringProp name="Header.name">X-OpenIDM-Password</stringProp>
                    <stringProp name="Header.value">${pwd}</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">chrome-extension://fhjcajmcbmldlhcimfajhfbgofnpcjmb</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.65 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}CsvAssertionRes-${ csvNegative} " enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.io.IOException;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.util.Iterator;
import com.idm.utils.FileReaderWriter;

String EXPECTED_CODE = &quot;null&quot;;

String responseJsonString = prev.getResponseDataAsString();
System.out.println(&quot;responseJsonString: &quot; + responseJsonString);

Failure = false;

try {          
	JsonParser parser = new JsonParser();
	JsonObject mainObject = parser.parse(responseJsonString).getAsJsonObject();
	String responseCode = &quot;&quot; + mainObject.get(&quot;code&quot;);
	String responseReason = &quot;&quot; + mainObject.get(&quot;reason&quot;);
	String responseMessage = &quot;&quot; + mainObject.get(&quot;message&quot;);
	
	if (EXPECTED_CODE.equalsIgnoreCase(responseCode)) {
		System.err.println(&quot;JSON-REQUEST: &quot; + vars.get(&quot;csvNegativeJson&quot;));
		Failure = true;
		FailureMessage = &quot;NEGATINE TEST WAS VALIDATED&quot;;
	
	}

	JsonObject detail = mainObject.getAsJsonObject(&quot;detail&quot;);
	JsonElement localizedMessage = detail.get(&quot;localizedMessage&quot;);
	JsonElement appErrorCode = detail.get(&quot;appErrorCode&quot;);
	if(localizedMessage == null || appErrorCode == null){
		System.err.println(&quot;INCORRECTED DETAIL: &quot; + detail);
		Failure = true;
		FailureMessage = &quot;INCORRECTED DETAIL&quot;;
	
	}

} catch (Throwable t) {
	//t.printStackTrace();
	Failure = true;
	FailureMessage = &quot;TROWABLE: &quot; + t.getMessage();
}

if (Failure) {
	FileReaderWriter frw = new FileReaderWriter(vars.get(&quot;report&quot;));
	String[] atrArr = {&quot;negative&quot;, vars.get(&quot;csvNegativeJson&quot;), responseJsonString};
		//* функция для конвертации из json формата в xml формат	
	function jsonToXmlString(atrArr) {
    var xml = &quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&quot;;
 
    for (var i in atrArr) {
        xml += &quot;&lt;&quot; + i + &quot;&gt;&quot; + atrArr[i] + &quot;&lt;/&quot; + i + &quot;&gt;\n&quot;;
    }
 
    return xml;
}
 
alert( jsonToXmlString(atrArr) );
//*
	frw.writeInfoFile(&quot;\t&quot;, xml);
}else{
	System.out.println(&quot;SUPPRESSION OF ERRORS&quot;);
	prev.setResponseOK();
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Delete userapprole" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1445241191000</longProp>
        <longProp name="ThreadGroup.end_time">1445241191000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="prepare" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.idm.utils.FileReaderWriter;
import org.apache.jmeter.services.FileServer;

vars.put(&quot;report&quot;, FileServer.getFileServer().getBaseDir() + File.separator + &quot;ErrReport.txt&quot;); //_${__time(ddMM_HHmm)}
System.out.println(vars.get(&quot;report&quot;));
FileReaderWriter frw = new FileReaderWriter(vars.get(&quot;report&quot;));


if( &quot;1&quot;.equals(vars.get(&quot;FatalError&quot;)) ){
	String[] atrArr = {&quot;FATAL_ERROR&quot;, &quot;THERE ARE DB OR APP PROBLEMS&quot;};

	frw.writeInfoFile(&quot;\t&quot;, atrArr);
}
//***20.10.2015

//vars.put(&quot;xml-report&quot;, FileServer.getFileServer().getBaseDir() + File.separator + &quot;Report.xml&quot;); //_${__time(ddMM_HHmm)}
///System.out.println(vars.get(&quot;xml-report&quot;));
//FileReaderWriter frw = new FileReaderWriter(vars.get(&quot;xml-report&quot;));


//if( &quot;1&quot;.equals(vars.get(&quot;FatalError&quot;)) ){
	//String[] atrArr = {&quot;FATAL_ERROR&quot;, &quot;THERE ARE DB OR APP PROBLEMS&quot;};

	//*** функция для конвертации из json формата в xml формат	
	//function jsonToXmlString(atrArr) {
    //var xml = &quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&quot;;
 
    //for (var i in atrArr) {
 //       xml += &quot;&lt;&quot; + i + &quot;&gt;&quot; + atrArr[i] + &quot;&lt;/&quot; + i + &quot;&gt;\n&quot;;
//}
 
//    return xml;
//}
 
//alert( jsonToXmlString(atrArr) );
//*
//	frw.writeInfoFile(&quot;\t&quot;, xml);
//}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="17.1.DELETE USERAPPROLE (positive Json)" enabled="true">
          <stringProp name="IfController.condition">&quot;${FatalError}&quot;==&quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop-4" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="TestPlan.comments">Count = количеству строк в input-файле</stringProp>
            <stringProp name="LoopController.loops">4</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name"> csvDeleteUserApprole</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${objectid}GetObjectid" enabled="true">
              <stringProp name="dataSource">openidmDB</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT objectid FROM openidm.usrapprole order by usr_id asc LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">resultset</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="${objectid}AssertGetObjectidUserApprole" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.ArrayList;
import java.util.HashMap;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

Failure = false;

try {  
	String objectid = vars.getObject(&quot;resultset&quot;).get(0).get(&quot;objectid&quot;).toString();
	vars.put(&quot;tmpStr&quot;, objectid);	 
	System.out.println(&quot;@ @ @ objectid: &gt;&quot; + vars.get(&quot;tmpStr&quot;) + &quot;&lt;&quot;);
	
} catch (Throwable t) {
	vars.put(&quot;tmpStr&quot;, &quot;&quot;);	 
	Failure = true;
	FailureMessage = &quot;TROWABLE: &quot; + t.getMessage();
	System.err.println(FailureMessage);
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${objectid}-PositiveDeleteUserApprole-${ csvPositiveDeleteUserApprole} " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/openidm/managed/usrapprole/${tmpStr}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-OpenIDM-Username" elementType="Header">
                    <stringProp name="Header.name">X-OpenIDM-Username</stringProp>
                    <stringProp name="Header.value">${objectid}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">ru,en-US;q=0.8,en;q=0.6</stringProp>
                  </elementProp>
                  <elementProp name="X-OpenIDM-Password" elementType="Header">
                    <stringProp name="Header.name">X-OpenIDM-Password</stringProp>
                    <stringProp name="Header.value">${pwd}</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">chrome-extension://fhjcajmcbmldlhcimfajhfbgofnpcjmb</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.65 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Asserrtion PositiveDeleteUserApprole" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;200&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">600</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Demo ALPHA" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1444216486000</longProp>
        <longProp name="ThreadGroup.end_time">1444216486000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">подготовка окружения</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserCreate-ivanov(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;userName&quot;: &quot;ivanov&quot;,&#xd;
	&quot;mail&quot;: &quot;ivanov@gaz-is.ru&quot;,&#xd;
	&quot;lastName&quot;: &quot;Иванов&quot;,&#xd;
	&quot;firstName&quot;: &quot;Степан&quot;,&#xd;
	&quot;middleName&quot;: &quot;Юрьевич&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/user?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserCreate-adminov-a(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;userName&quot;: &quot;adminov-a&quot;,&#xd;
	&quot;mail&quot;: &quot;adminov-a@gaz-is.ru&quot;,&#xd;
	&quot;lastName&quot;: &quot;Админов&quot;,&#xd;
	&quot;firstName&quot;: &quot;Григорий&quot;,&#xd;
	&quot;middleName&quot;: &quot;Иванович&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/user?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RoleCreate-Администратор(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;appRoleName&quot;: &quot;Администратор&quot;,&#xd;
	&quot;appRoleDesc&quot;: &quot;Администратор инфорционной системы&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/approle?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AssignRole Администратор ToUser adminov-a(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;arrayObjects&quot;: [{&#xd;
		&quot;usr_id&quot;: 2,&#xd;
		&quot;approle_id&quot;: 1&#xd;
	}]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/usrapprole?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create XMLConnectorDEMO1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;connectorName&quot;: &quot;XMLConnectorDEMO1&quot;,&#xd;
	&quot;connectorDesc&quot;: &quot;org.forgerock.openicf.connectors.xml.XMLConnector&quot;,&#xd;
	&quot;connectorBody&quot;: {&#xd;
		&quot;name&quot;: &quot;xmlfile&quot;,&#xd;
		&quot;objectTypes&quot;: {&#xd;
			&quot;account&quot;: {&#xd;
				&quot;id&quot;: &quot;__ACCOUNT__&quot;,&#xd;
				&quot;type&quot;: &quot;object&quot;,&#xd;
				&quot;$schema&quot;: &quot;http://json-schema.org/draft-03/schema&quot;,&#xd;
				&quot;nativeType&quot;: &quot;__ACCOUNT__&quot;,&#xd;
				&quot;properties&quot;: {&#xd;
					&quot;_id&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;nativeName&quot;: &quot;__UID__&quot;&#xd;
					},&#xd;
					&quot;username&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;required&quot;: true,&#xd;
						&quot;nativeName&quot;: &quot;username&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					},&#xd;
					&quot;password&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;required&quot;: false,&#xd;
						&quot;nativeName&quot;: &quot;password&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					},&#xd;
					&quot;usertype&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;required&quot;: false,&#xd;
						&quot;nativeName&quot;: &quot;usertype&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					},&#xd;
&#xd;
					&quot;lastname&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;required&quot;: false,&#xd;
						&quot;nativeName&quot;: &quot;lastname&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					},&#xd;
					&quot;firstname&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;required&quot;: false,&#xd;
						&quot;nativeName&quot;: &quot;firstname&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					},&#xd;
					&quot;middlename&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;required&quot;: false,&#xd;
						&quot;nativeName&quot;: &quot;middlename&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					},&#xd;
					&quot;date&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;required&quot;: false,&#xd;
						&quot;nativeName&quot;: &quot;date&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					},&#xd;
					&quot;time&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;required&quot;: false,&#xd;
						&quot;nativeName&quot;: &quot;time&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					},&#xd;
					&quot;age&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;required&quot;: false,&#xd;
						&quot;nativeName&quot;: &quot;age&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					},&#xd;
					&quot;administrator&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;required&quot;: false,&#xd;
						&quot;nativeName&quot;: &quot;administrator&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					},&#xd;
					&quot;description&quot;: {&#xd;
						&quot;type&quot;: &quot;string&quot;,&#xd;
						&quot;nativeName&quot;: &quot;__DESCRIPTION__&quot;,&#xd;
						&quot;nativeType&quot;: &quot;string&quot;&#xd;
					}&#xd;
				}&#xd;
			}&#xd;
		},&#xd;
		&quot;connectorRef&quot;: {&#xd;
			&quot;bundleName&quot;: &quot;org.forgerock.openicf.connectors.xml-connector&quot;,&#xd;
			&quot;bundleVersion&quot;: &quot;1.1.0.2&quot;,&#xd;
			&quot;connectorName&quot;: &quot;org.forgerock.openicf.connectors.xml.XMLConnector&quot;&#xd;
		},&#xd;
		&quot;operationOptions&quot;: {},&#xd;
		&quot;operationTimeout&quot;: {&#xd;
			&quot;GET&quot;: -1,&#xd;
			&quot;SYNC&quot;: -1,&#xd;
			&quot;TEST&quot;: -1,&#xd;
			&quot;CREATE&quot;: -1,&#xd;
			&quot;DELETE&quot;: -1,&#xd;
			&quot;SCHEMA&quot;: -1,&#xd;
			&quot;SEARCH&quot;: -1,&#xd;
			&quot;UPDATE&quot;: -1,&#xd;
			&quot;VALIDATE&quot;: -1,&#xd;
			&quot;AUTHENTICATE&quot;: -1,&#xd;
			&quot;SCRIPT_ON_RESOURCE&quot;: -1,&#xd;
			&quot;SCRIPT_ON_CONNECTOR&quot;: -1&#xd;
		},&#xd;
		&quot;poolConfigOption&quot;: {&#xd;
			&quot;maxIdle&quot;: 1,&#xd;
			&quot;maxWait&quot;: 150000,&#xd;
			&quot;minIdle&quot;: 1,&#xd;
			&quot;maxObjects&quot;: 1,&#xd;
			&quot;minEvictableIdleTimeMillis&quot;: 120000&#xd;
		},&#xd;
		&quot;producerBufferSize&quot;: 100,&#xd;
		&quot;syncFailureHandler&quot;: {&#xd;
			&quot;maxRetries&quot;: 5,&#xd;
			&quot;postRetryAction&quot;: &quot;logged-ignore&quot;&#xd;
		},&#xd;
		&quot;connectorPoolingSupported&quot;: true&#xd;
	}&#xd;
&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">192.168.56.10</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/connector?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateResourceXML" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;restype_rev&quot;: &quot;0&quot;,&#xd;
	&quot;restype_id&quot;: 1,&#xd;
	&quot;connector_id&quot;: 3,&#xd;
	&quot;resName&quot;: &quot;XML1&quot;,&#xd;
	&quot;resDesc&quot;: &quot;XML File&quot;,&#xd;
	&quot;resBody&quot;: {&#xd;
		&quot;xsdIcfFilePath&quot;: &quot;&amp;{launcher.project.location}/data/resource-schema-1.xsd&quot;,&#xd;
		&quot;xsdFilePath&quot;: &quot;&amp;{launcher.project.location}/data/resource-schema-extension.xsd&quot;,&#xd;
		&quot;xmlFilePath&quot;: &quot;&amp;{launcher.project.location}/data/xmlConnectorData.xml&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">192.168.56.10</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resource?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateResourceLDAP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;restype_rev&quot;: &quot;0&quot;,&#xd;
	&quot;restype_id&quot;: 2,&#xd;
	&quot;connector_id&quot;: 2,&#xd;
	&quot;resName&quot;: &quot;LDAP1&quot;,&#xd;
	&quot;resDesc&quot;: &quot;OpenLDAP&quot;,&#xd;
	&quot;resBody&quot;: {&#xd;
		&quot;host&quot;: &quot;localhost&quot;,&#xd;
		&quot;port&quot;: &quot;389&quot;,&#xd;
		&quot;ssl&quot;: false,&#xd;
		&quot;principal&quot;: &quot;cn=admin,dc=vagrant,dc=loc&quot;,&#xd;
		&quot;credentials&quot;: &quot;admin&quot;,&#xd;
		&quot;baseContexts&quot;: [&quot;ou=People,dc=vagrant,dc=loc&quot;],&#xd;
		&quot;baseContextsToSynchronize&quot;: [&quot;ou=People,dc=vagrant,dc=loc&quot;],&#xd;
		&quot;accountSearchFilter&quot;: &quot;&quot;,&#xd;
		&quot;accountSynchronizationFilter&quot;: &quot;&quot;,&#xd;
		&quot;groupSearchFilter&quot;: &quot;&quot;,&#xd;
		&quot;groupSynchronizationFilter&quot;: &quot;&quot;,&#xd;
		&quot;passwordAttributeToSynchronize&quot;: &quot;&quot;,&#xd;
		&quot;synchronizePasswords&quot;: false,&#xd;
		&quot;removeLogEntryObjectClassFromFilter&quot;: true,&#xd;
		&quot;modifiersNamesToFilterOut&quot;: [&quot;cn=admin,dc=vagrant,dc=loc&quot;],&#xd;
		&quot;passwordDecryptionKey&quot;: &quot;&quot;,&#xd;
		&quot;changeLogBlockSize&quot;: &quot;100&quot;,&#xd;
		&quot;attributesToSynchronize&quot;: [&quot;uid&quot;,&quot;dn&quot;,&quot;givenName&quot;,&quot;cn&quot;,&quot;sn&quot;],&#xd;
		&quot;changeNumberAttribute&quot;: &quot;changeNumber&quot;,&#xd;
		&quot;passwordDecryptionInitializationVector&quot;: &quot;&quot;,&#xd;
		&quot;filterWithOrInsteadOfAnd&quot;: false,&#xd;
		&quot;objectClassesToSynchronize&quot;: [&quot;top&quot;,&quot;person&quot;,&quot;organizationalPerson&quot;,&quot;inetOrgPerson&quot;],&#xd;
		&quot;vlvSortAttribute&quot;: &quot;uid&quot;,&#xd;
		&quot;passwordAttribute&quot;: &quot;userPassword&quot;,&#xd;
		&quot;useBlocks&quot;: false,&#xd;
		&quot;maintainPosixGroupMembership&quot;: false,&#xd;
		&quot;failover&quot;: null,&#xd;
		&quot;readSchema&quot;: true,&#xd;
		&quot;accountObjectClasses&quot;: [&quot;top&quot;,&quot;person&quot;,&quot;organizationalPerson&quot;,&quot;inetOrgPerson&quot;],&#xd;
		&quot;accountUserNameAttributes&quot;: [&quot;uid&quot;],&#xd;
		&quot;groupMemberAttribute&quot;: &quot;uniqueMember&quot;,&#xd;
		&quot;passwordHashAlgorithm&quot;: &quot;SSHA&quot;,&#xd;
		&quot;usePagedResultControl&quot;: true,&#xd;
		&quot;blockSize&quot;: &quot;100&quot;,&#xd;
		&quot;uidAttribute&quot;: &quot;entryUUID&quot;,&#xd;
		&quot;maintainLdapGroupMembership&quot;: false,&#xd;
		&quot;respectResourcePasswordPolicyChangeAfterReset&quot;: false,&#xd;
		&quot;groupObjectClasses&quot;: [&quot;top&quot;]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">192.168.56.10</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resource?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateReferenceBookUserType1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;refBookCode&quot;: &quot;Ученик&quot;,&#xd;
	&quot;refBookName&quot;: &quot;Ученик&quot;,&#xd;
	&quot;refBookType&quot;: &quot;type&quot;,&#xd;
	&quot;resource_id&quot;: 1&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/referencebook?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateReferenceBookUserType2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;refBookCode&quot;: &quot;Преподаватель&quot;,&#xd;
	&quot;refBookName&quot;: &quot;Преподаватель&quot;,&#xd;
	&quot;refBookType&quot;: &quot;type&quot;,&#xd;
	&quot;resource_id&quot;: 1&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/referencebook?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateFormXML" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;resFormName&quot;: &quot;XML1&quot;,&#xd;
	&quot;resFormDesc&quot;: &quot;XML1&quot;,&#xd;
	&quot;resFormTable&quot;: &quot;rf_xml1&quot;,&#xd;
	&quot;resFormBody&quot;: {&#xd;
		&quot;properties&quot;: {&#xd;
			&quot;username&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;username&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			},&#xd;
			&quot;password&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;password&quot;,&#xd;
				&quot;maxLength&quot;: 512,&#xd;
				&quot;encryption&quot;: {}&#xd;
			},&#xd;
			&quot;usertype&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;lookup&quot;,&#xd;
				&quot;displayName&quot;: &quot;usertype&quot;,&#xd;
				&quot;object&quot;: &quot;managed/referencebook&quot;,&#xd;
				&quot;filter&quot;: &quot;/refBookType eq \&quot;type\&quot;&quot;,&#xd;
				&quot;lookupDisplayFields&quot;: &quot;refBookCode, refBookName&quot;,&#xd;
				&quot;lookupField&quot;: &quot;refBookCode&quot;&#xd;
			},&#xd;
			&quot;lastname&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;lastname&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			},&#xd;
			&quot;firstname&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;firstname&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			},&#xd;
			&quot;middlename&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;middlename&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			},&#xd;
			&quot;date&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;date&quot;,&#xd;
				&quot;displayName&quot;: &quot;date&quot;&#xd;
			},&#xd;
			&quot;time&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;timestamp&quot;,&#xd;
				&quot;displayName&quot;: &quot;time&quot;&#xd;
			},&#xd;
			&quot;age&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;age&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			},&#xd;
			&quot;administrator&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;flag&quot;,&#xd;
				&quot;displayName&quot;: &quot;administrator&quot;&#xd;
			}&#xd;
		},&#xd;
		&quot;order&quot;: [&quot;username&quot;, &quot;password&quot;, &quot;usertype&quot;, &quot;lastname&quot;, &quot;firstname&quot;, &quot;middlename&quot;, &quot;date&quot;, &quot;time&quot;, &quot;age&quot;, &quot;administrator&quot;],&#xd;
		&quot;required&quot;: [&quot;username&quot;],&#xd;
		&quot;private&quot;: [&quot;password&quot;]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resform?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateFormLDAP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;resFormName&quot;: &quot;LDAP1&quot;,&#xd;
	&quot;resFormDesc&quot;: &quot;LDAP form&quot;,&#xd;
	&quot;resFormTable&quot;: &quot;rf_ldap1&quot;,&#xd;
	&quot;resFormBody&quot;: {&#xd;
		&quot;properties&quot;: {&#xd;
			&quot;uid&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;uid&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			},&#xd;
			&quot;userpassword&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;userpassword&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			},&#xd;
			&quot;dn&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;dn&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			},&#xd;
			&quot;givenname&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;givenname&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			},&#xd;
			&quot;sn&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;sn&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			},&#xd;
			&quot;cn&quot;: {&#xd;
				&quot;fieldType&quot;: &quot;textField&quot;,&#xd;
				&quot;displayName&quot;: &quot;cn&quot;,&#xd;
				&quot;maxLength&quot;: 80&#xd;
			}&#xd;
		},&#xd;
		&quot;order&quot;: [&quot;uid&quot;, &quot;userpassword&quot;, &quot;dn&quot;, &quot;givenname&quot;, &quot;sn&quot;, &quot;cn&quot;],&#xd;
		&quot;required&quot;: [&quot;uid&quot;]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resform?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create resAccount XML" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;resAccName&quot;: &quot;XML1&quot;,&#xd;
	&quot;resAccDesc&quot;: &quot;XML1&quot;,&#xd;
	&quot;beneficiarObject&quot;: &quot;managed/user&quot;,&#xd;
	&quot;resource_id&quot;: 1,&#xd;
	&quot;resform_id&quot;: 1,&#xd;
	&quot;connectorObjectType&quot;: &quot;account&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resaccount?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create resAccount LDAP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;resAccName&quot;: &quot;LDAP1&quot;,&#xd;
	&quot;resAccDesc&quot;: &quot;LDAP1&quot;,&#xd;
	&quot;beneficiarObject&quot;: &quot;managed/user&quot;,&#xd;
	&quot;resource_id&quot;: 2,&#xd;
	&quot;resform_id&quot;: 2,&#xd;
	&quot;connectorObjectType&quot;: &quot;account&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resaccount?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping XML pre-pop" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;mapName&quot;: &quot;prepop_xml1&quot;,&#xd;
	&quot;mapType&quot;: &quot;create&quot;,&#xd;
	&quot;mapDesc&quot;: &quot;pre-pop xml&quot;,&#xd;
	&quot;mapSource&quot;: &quot;managed/user&quot;,&#xd;
	&quot;mapTarget&quot;: &quot;resform/XML1&quot;,&#xd;
	&quot;mapBody&quot;: {&#xd;
		&quot;policies&quot;: [],&#xd;
		&quot;properties&quot;: [{&#xd;
			&quot;source&quot;: &quot;userName&quot;,&#xd;
			&quot;target&quot;: &quot;username&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;lastName&quot;,&#xd;
			&quot;target&quot;: &quot;lastname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;firstName&quot;,&#xd;
			&quot;target&quot;: &quot;firstname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;middleName&quot;,&#xd;
			&quot;target&quot;: &quot;middlename&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;&quot;,&#xd;
			&quot;target&quot;: &quot;usertype&quot;,&#xd;
			&quot;transform&quot;: {&#xd;
				&quot;type&quot;: &quot;text/javascript&quot;,&#xd;
				&quot;source&quot;: &quot;&apos;Преподаватель&apos;&quot;&#xd;
			}&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping XML create" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;mapName&quot;: &quot;xml_connectorAuto_create&quot;,&#xd;
	&quot;mapType&quot;: &quot;create&quot;,&#xd;
	&quot;mapDesc&quot;: &quot;rf_xml to xml&quot;,&#xd;
	&quot;mapSource&quot;: &quot;resform/XML1&quot;,&#xd;
	&quot;mapTarget&quot;: &quot;connector/auto&quot;,&#xd;
	&quot;mapBody&quot;: {&#xd;
		&quot;policies&quot;: [],&#xd;
		&quot;properties&quot;: [{&#xd;
			&quot;source&quot;: &quot;lastname&quot;,&#xd;
			&quot;target&quot;: &quot;lastname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;firstname&quot;,&#xd;
			&quot;target&quot;: &quot;firstname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;middlename&quot;,&#xd;
			&quot;target&quot;: &quot;middlename&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;username&quot;,&#xd;
			&quot;target&quot;: &quot;username&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;password&quot;,&#xd;
			&quot;target&quot;: &quot;password&quot;,&#xd;
			&quot;transform&quot;: {&#xd;
				&quot;type&quot;: &quot;text/javascript&quot;,&#xd;
				&quot;source&quot;: &quot;openidm.decrypt(source)&quot;&#xd;
			}&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;usertype&quot;,&#xd;
			&quot;target&quot;: &quot;usertype&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;date&quot;,&#xd;
			&quot;target&quot;: &quot;date&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;time&quot;,&#xd;
			&quot;target&quot;: &quot;time&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;age&quot;,&#xd;
			&quot;target&quot;: &quot;age&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;administrator&quot;,&#xd;
			&quot;target&quot;: &quot;administrator&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;_id&quot;,&#xd;
			&quot;target&quot;: &quot;_id&quot;&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping XML-&gt;connector/auto update" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;mapName&quot;: &quot;xml_connectorAuto_update&quot;,&#xd;
	&quot;mapType&quot;: &quot;update&quot;,&#xd;
	&quot;mapDesc&quot;: &quot;rf_xml to xml&quot;,&#xd;
	&quot;mapSource&quot;: &quot;resform/XML1&quot;,&#xd;
	&quot;mapTarget&quot;: &quot;connector/auto&quot;,&#xd;
	&quot;mapBody&quot;: {&#xd;
		&quot;policies&quot;: [],&#xd;
		&quot;properties&quot;: [{&#xd;
			&quot;source&quot;: &quot;lastname&quot;,&#xd;
			&quot;target&quot;: &quot;lastname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;firstname&quot;,&#xd;
			&quot;target&quot;: &quot;firstname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;middlename&quot;,&#xd;
			&quot;target&quot;: &quot;middlename&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;username&quot;,&#xd;
			&quot;target&quot;: &quot;username&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;password&quot;,&#xd;
			&quot;target&quot;: &quot;password&quot;,&#xd;
			&quot;transform&quot;: {&#xd;
				&quot;type&quot;: &quot;text/javascript&quot;,&#xd;
				&quot;source&quot;: &quot;openidm.decrypt(source)&quot;&#xd;
			}&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;usertype&quot;,&#xd;
			&quot;target&quot;: &quot;usertype&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;date&quot;,&#xd;
			&quot;target&quot;: &quot;date&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;time&quot;,&#xd;
			&quot;target&quot;: &quot;time&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;age&quot;,&#xd;
			&quot;target&quot;: &quot;age&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;administrator&quot;,&#xd;
			&quot;target&quot;: &quot;administrator&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;_id&quot;,&#xd;
			&quot;target&quot;: &quot;_id&quot;&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping LDAP pre-pop" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;mapName&quot;: &quot;prepop_xldap1&quot;,&#xd;
	&quot;mapType&quot;: &quot;create&quot;,&#xd;
	&quot;mapDesc&quot;: &quot;pre-pop ldap&quot;,&#xd;
	&quot;mapSource&quot;: &quot;managed/user&quot;,&#xd;
	&quot;mapTarget&quot;: &quot;resform/LDAP1&quot;,&#xd;
	&quot;mapBody&quot;: {&#xd;
		&quot;policies&quot;: [],&#xd;
		&quot;properties&quot;: [{&#xd;
			&quot;source&quot;: &quot;userName&quot;,&#xd;
			&quot;target&quot;: &quot;uid&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;&quot;,&#xd;
			&quot;target&quot;: &quot;dn&quot;,&#xd;
			&quot;transform&quot;: {&#xd;
				&quot;type&quot;: &quot;text/javascript&quot;,&#xd;
				&quot;source&quot;: &quot;&apos;uid=&apos;+source.userName+&apos;,ou=People,dc=vagrant,dc=loc&apos;&quot;&#xd;
			}&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;middleName&quot;,&#xd;
			&quot;target&quot;: &quot;givenname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;lastName&quot;,&#xd;
			&quot;target&quot;: &quot;sn&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;firstName&quot;,&#xd;
			&quot;target&quot;: &quot;cn&quot;&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping LDAP create" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;mapName&quot;: &quot;ldap_connectorAuto_create&quot;,&#xd;
  &quot;mapType&quot;: &quot;create&quot;,&#xd;
  &quot;mapDesc&quot;: &quot;LDAP CREATE&quot;,&#xd;
  &quot;mapSource&quot;: &quot;resform/LDAP1&quot;,&#xd;
  &quot;mapTarget&quot;: &quot;connector/auto&quot;,&#xd;
  &quot;mapBody&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
    ],&#xd;
    &quot;properties&quot;: [&#xd;
      {&#xd;
        &quot;source&quot;: &quot;uid&quot;,&#xd;
        &quot;target&quot;: &quot;uid&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;dn&quot;,&#xd;
        &quot;target&quot;: &quot;dn&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;givenname&quot;,&#xd;
        &quot;target&quot;: &quot;givenName&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;cn&quot;,&#xd;
        &quot;target&quot;: &quot;cn&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;sn&quot;,&#xd;
        &quot;target&quot;: &quot;sn&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping LDAP-&gt;connector/auto update" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;mapName&quot;: &quot;ldap_connectorAuto_update&quot;,&#xd;
  &quot;mapType&quot;: &quot;update&quot;,&#xd;
  &quot;mapDesc&quot;: &quot;LDAP UPDATE&quot;,&#xd;
  &quot;mapSource&quot;: &quot;resform/LDAP1&quot;,&#xd;
  &quot;mapTarget&quot;: &quot;connector/auto&quot;,&#xd;
  &quot;mapBody&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
    ],&#xd;
    &quot;properties&quot;: [&#xd;
      {&#xd;
        &quot;source&quot;: &quot;uid&quot;,&#xd;
        &quot;target&quot;: &quot;uid&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;dn&quot;,&#xd;
        &quot;target&quot;: &quot;dn&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;givenname&quot;,&#xd;
        &quot;target&quot;: &quot;givenName&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;cn&quot;,&#xd;
        &quot;target&quot;: &quot;cn&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;sn&quot;,&#xd;
        &quot;target&quot;: &quot;sn&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>false</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\TEST\BACKEND\1.xls</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>false</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">C:\TEST\BACKEND\2.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">500</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sync LDAP Groups to Entitlement" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1444216486000</longProp>
        <longProp name="ThreadGroup.end_time">1444216486000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">подготовка окружения</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserCreate-ivanov(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;userName&quot;: &quot;ivanov&quot;,&#xd;
	&quot;mail&quot;: &quot;ivanov@gaz-is.ru&quot;,&#xd;
	&quot;lastName&quot;: &quot;Иванов&quot;,&#xd;
	&quot;firstName&quot;: &quot;Степан&quot;,&#xd;
	&quot;middleName&quot;: &quot;Юрьевич&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/user?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserCreate-adminov-a(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;userName&quot;: &quot;adminov-a&quot;,&#xd;
	&quot;mail&quot;: &quot;adminov-a@gaz-is.ru&quot;,&#xd;
	&quot;lastName&quot;: &quot;Админов&quot;,&#xd;
	&quot;firstName&quot;: &quot;Григорий&quot;,&#xd;
	&quot;middleName&quot;: &quot;Иванович&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/user?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RoleCreate-Администратор(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;appRoleName&quot;: &quot;Администратор&quot;,&#xd;
	&quot;appRoleDesc&quot;: &quot;Администратор инфорционной системы&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/approle?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AssignRole Администратор ToUser adminov-a(HTTP)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;arrayObjects&quot;: [{&#xd;
		&quot;usr_id&quot;: 2,&#xd;
		&quot;approle_id&quot;: 1&#xd;
	}]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/usrapprole?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateResourceLDAP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;restype_rev&quot;: &quot;0&quot;,&#xd;
	&quot;restype_id&quot;: 2,&#xd;
	&quot;connector_id&quot;: 2,&#xd;
	&quot;resName&quot;: &quot;ldap&quot;,&#xd;
	&quot;resDesc&quot;: &quot;OpenLDAP&quot;,&#xd;
	&quot;resBody&quot;: {&#xd;
		&quot;host&quot;: &quot;10.0.101.90&quot;,&#xd;
		&quot;port&quot;: &quot;389&quot;,&#xd;
		&quot;ssl&quot;: false,&#xd;
		&quot;principal&quot;: &quot;lab\\administrator&quot;,&#xd;
		&quot;credentials&quot;: &quot;Gazprom*123&quot;,&#xd;
		&quot;baseContexts&quot;: [&quot;OU=People,DC=lab,DC=local&quot;],&#xd;
		&quot;baseContextsToSynchronize&quot;: [&quot;OU=People,DC=lab,DC=local&quot;],&#xd;
		&quot;accountSearchFilter&quot;: &quot;&quot;,&#xd;
		&quot;accountSynchronizationFilter&quot;: &quot;&quot;,&#xd;
		&quot;groupSearchFilter&quot;: &quot;&quot;,&#xd;
		&quot;groupSynchronizationFilter&quot;: &quot;&quot;,&#xd;
		&quot;passwordAttributeToSynchronize&quot;: &quot;&quot;,&#xd;
		&quot;synchronizePasswords&quot;: false,&#xd;
		&quot;removeLogEntryObjectClassFromFilter&quot;: true,&#xd;
		&quot;modifiersNamesToFilterOut&quot;: [&quot;cn=admin,dc=vagrant,dc=loc&quot;],&#xd;
		&quot;passwordDecryptionKey&quot;: &quot;&quot;,&#xd;
		&quot;changeLogBlockSize&quot;: &quot;100&quot;,&#xd;
		&quot;attributesToSynchronize&quot;: [&quot;uid&quot;,&quot;dn&quot;,&quot;givenName&quot;,&quot;cn&quot;,&quot;sn&quot;],&#xd;
		&quot;changeNumberAttribute&quot;: &quot;changeNumber&quot;,&#xd;
		&quot;passwordDecryptionInitializationVector&quot;: &quot;&quot;,&#xd;
		&quot;filterWithOrInsteadOfAnd&quot;: false,&#xd;
		&quot;objectClassesToSynchronize&quot;: [&quot;top&quot;,&quot;person&quot;,&quot;organizationalPerson&quot;,&quot;inetOrgPerson&quot;],&#xd;
		&quot;vlvSortAttribute&quot;: &quot;uid&quot;,&#xd;
		&quot;passwordAttribute&quot;: &quot;userPassword&quot;,&#xd;
		&quot;useBlocks&quot;: false,&#xd;
		&quot;maintainPosixGroupMembership&quot;: false,&#xd;
		&quot;failover&quot;: null,&#xd;
		&quot;readSchema&quot;: true,&#xd;
		&quot;accountObjectClasses&quot;: [&quot;top&quot;,&quot;person&quot;,&quot;organizationalPerson&quot;,&quot;inetOrgPerson&quot;],&#xd;
		&quot;accountUserNameAttributes&quot;: [&quot;uid&quot;],&#xd;
		&quot;groupMemberAttribute&quot;: &quot;uniqueMember&quot;,&#xd;
		&quot;passwordHashAlgorithm&quot;: &quot;SSHA&quot;,&#xd;
		&quot;usePagedResultControl&quot;: true,&#xd;
		&quot;blockSize&quot;: &quot;100&quot;,&#xd;
		&quot;uidAttribute&quot;: &quot;entryUUID&quot;,&#xd;
		&quot;maintainLdapGroupMembership&quot;: false,&#xd;
		&quot;respectResourcePasswordPolicyChangeAfterReset&quot;: false,&#xd;
		&quot;groupObjectClasses&quot;: [&quot;top&quot;]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resource?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping LDAP-&gt;Entitlement create" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">	{&#xd;
	    &quot;mapName&quot;: &quot;SystemLdapGroup_Entitlement&quot;,&#xd;
	    &quot;mapType&quot;: &quot;create&quot;,&#xd;
	    &quot;mapDesc&quot;: &quot;SystemLdapGroup_Entitlement&quot;,&#xd;
	    &quot;mapSource&quot;: &quot;system/ldap/group&quot;,&#xd;
	    &quot;mapTarget&quot;: &quot;managed/entitlement&quot;,&#xd;
	    &quot;mapBody&quot;: {&#xd;
	        &quot;properties&quot;: [&#xd;
	            {&#xd;
	                &quot;source&quot;: &quot;dn&quot;,&#xd;
	                &quot;target&quot;: &quot;entCode&quot;&#xd;
	            },&#xd;
	            {&#xd;
	                &quot;source&quot;: &quot;dn&quot;,&#xd;
	                &quot;target&quot;: &quot;entName&quot;&#xd;
	            },&#xd;
	            {&#xd;
	                &quot;source&quot;: &quot;objectCategory&quot;,&#xd;
	                &quot;target&quot;: &quot;entType&quot;&#xd;
	            },&#xd;
	            {&#xd;
	                &quot;source&quot;: &quot;adminCount&quot;,&#xd;
	                &quot;target&quot;: &quot;resource_id&quot;&#xd;
	            }&#xd;
	        ],&#xd;
	        &quot;policies&quot;: [&#xd;
	            {&#xd;
	                &quot;situation&quot;: &quot;CONFIRMED&quot;,&#xd;
	                &quot;action&quot;: &quot;UPDATE&quot;&#xd;
	            },&#xd;
	            {&#xd;
	                &quot;situation&quot;: &quot;FOUND&quot;,&#xd;
	                &quot;action&quot;: &quot;UPDATE&quot;&#xd;
	            },&#xd;
	            {&#xd;
	                &quot;situation&quot;: &quot;ABSENT&quot;,&#xd;
	                &quot;action&quot;: &quot;CREATE&quot;&#xd;
	            },&#xd;
	            {&#xd;
	                &quot;situation&quot;: &quot;AMBIGUOUS&quot;,&#xd;
	                &quot;action&quot;: &quot;EXCEPTION&quot;&#xd;
	            },&#xd;
	            {&#xd;
	                &quot;situation&quot;: &quot;MISSING&quot;,&#xd;
	                &quot;action&quot;: &quot;UNLINK&quot;&#xd;
	            },&#xd;
	            {&#xd;
	                &quot;situation&quot;: &quot;SOURCE_MISSING&quot;,&#xd;
	                &quot;action&quot;: &quot;EXCEPTION&quot;&#xd;
	            },&#xd;
	            {&#xd;
	                &quot;situation&quot;: &quot;UNQUALIFIED&quot;,&#xd;
	                &quot;action&quot;: &quot;IGNORE&quot;&#xd;
	            },&#xd;
	            {&#xd;
	                &quot;situation&quot;: &quot;UNASSIGNED&quot;,&#xd;
	                &quot;action&quot;: &quot;IGNORE&quot;&#xd;
	            }&#xd;
	        ]&#xd;
	    }&#xd;
	}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Recon" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/recon?_action=recon&amp;mapping=SystemLdapGroup_Entitlement&amp;waitForCompletion=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ReferenceBook" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1453877723000</longProp>
        <longProp name="ThreadGroup.end_time">1453877723000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateResourceLDAP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;restype_rev&quot;: &quot;0&quot;,&#xd;
	&quot;restype_id&quot;: 2,&#xd;
	&quot;connector_id&quot;: 2,&#xd;
	&quot;resName&quot;: &quot;ldap&quot;,&#xd;
	&quot;resDesc&quot;: &quot;OpenLDAP&quot;,&#xd;
	&quot;resBody&quot;: {&#xd;
		&quot;host&quot;: &quot;10.0.101.90&quot;,&#xd;
		&quot;port&quot;: &quot;389&quot;,&#xd;
		&quot;ssl&quot;: false,&#xd;
		&quot;principal&quot;: &quot;lab\\administrator&quot;,&#xd;
		&quot;credentials&quot;: &quot;Gazprom*123&quot;,&#xd;
		&quot;baseContexts&quot;: [&quot;OU=People,DC=lab,DC=local&quot;],&#xd;
		&quot;baseContextsToSynchronize&quot;: [&quot;OU=People,DC=lab,DC=local&quot;],&#xd;
		&quot;accountSearchFilter&quot;: &quot;&quot;,&#xd;
		&quot;accountSynchronizationFilter&quot;: &quot;&quot;,&#xd;
		&quot;groupSearchFilter&quot;: &quot;&quot;,&#xd;
		&quot;groupSynchronizationFilter&quot;: &quot;&quot;,&#xd;
		&quot;passwordAttributeToSynchronize&quot;: &quot;&quot;,&#xd;
		&quot;synchronizePasswords&quot;: false,&#xd;
		&quot;removeLogEntryObjectClassFromFilter&quot;: true,&#xd;
		&quot;modifiersNamesToFilterOut&quot;: [&quot;cn=admin,dc=vagrant,dc=loc&quot;],&#xd;
		&quot;passwordDecryptionKey&quot;: &quot;&quot;,&#xd;
		&quot;changeLogBlockSize&quot;: &quot;100&quot;,&#xd;
		&quot;attributesToSynchronize&quot;: [&quot;uid&quot;,&quot;dn&quot;,&quot;givenName&quot;,&quot;cn&quot;,&quot;sn&quot;],&#xd;
		&quot;changeNumberAttribute&quot;: &quot;changeNumber&quot;,&#xd;
		&quot;passwordDecryptionInitializationVector&quot;: &quot;&quot;,&#xd;
		&quot;filterWithOrInsteadOfAnd&quot;: false,&#xd;
		&quot;objectClassesToSynchronize&quot;: [&quot;top&quot;,&quot;person&quot;,&quot;organizationalPerson&quot;,&quot;inetOrgPerson&quot;],&#xd;
		&quot;vlvSortAttribute&quot;: &quot;uid&quot;,&#xd;
		&quot;passwordAttribute&quot;: &quot;userPassword&quot;,&#xd;
		&quot;useBlocks&quot;: false,&#xd;
		&quot;maintainPosixGroupMembership&quot;: false,&#xd;
		&quot;failover&quot;: null,&#xd;
		&quot;readSchema&quot;: true,&#xd;
		&quot;accountObjectClasses&quot;: [&quot;top&quot;,&quot;person&quot;,&quot;organizationalPerson&quot;,&quot;inetOrgPerson&quot;],&#xd;
		&quot;accountUserNameAttributes&quot;: [&quot;uid&quot;],&#xd;
		&quot;groupMemberAttribute&quot;: &quot;uniqueMember&quot;,&#xd;
		&quot;passwordHashAlgorithm&quot;: &quot;SSHA&quot;,&#xd;
		&quot;usePagedResultControl&quot;: true,&#xd;
		&quot;blockSize&quot;: &quot;100&quot;,&#xd;
		&quot;uidAttribute&quot;: &quot;entryUUID&quot;,&#xd;
		&quot;maintainLdapGroupMembership&quot;: false,&#xd;
		&quot;respectResourcePasswordPolicyChangeAfterReset&quot;: false,&#xd;
		&quot;groupObjectClasses&quot;: [&quot;top&quot;]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/resource?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateReferenceBookUserType1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;refBookCode&quot;: &quot;Ученик&quot;,&#xd;
	&quot;refBookName&quot;: &quot;Ученик&quot;,&#xd;
	&quot;refBookType&quot;: &quot;type&quot;,&#xd;
	&quot;resource_id&quot;: 1&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/referencebook?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateReferenceBookUserType2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;refBookCode&quot;: &quot;Преподаватель&quot;,&#xd;
	&quot;refBookName&quot;: &quot;Преподаватель&quot;,&#xd;
	&quot;refBookType&quot;: &quot;type&quot;,&#xd;
	&quot;resource_id&quot;: 1&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/referencebook?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MappingTests" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1453984794000</longProp>
        <longProp name="ThreadGroup.end_time">1453984794000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping XML pre-pop" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;mapName&quot;: &quot;prepop_xml1&quot;,&#xd;
	&quot;mapType&quot;: &quot;prepopulate&quot;,&#xd;
	&quot;mapDesc&quot;: &quot;pre-pop xml&quot;,&#xd;
	&quot;mapSource&quot;: &quot;managed/user&quot;,&#xd;
	&quot;mapTarget&quot;: &quot;resform/XML1&quot;,&#xd;
	&quot;mapBody&quot;: {&#xd;
		&quot;policies&quot;: [],&#xd;
		&quot;properties&quot;: [{&#xd;
			&quot;source&quot;: &quot;userName&quot;,&#xd;
			&quot;target&quot;: &quot;username&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;lastName&quot;,&#xd;
			&quot;target&quot;: &quot;lastname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;firstName&quot;,&#xd;
			&quot;target&quot;: &quot;firstname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;middleName&quot;,&#xd;
			&quot;target&quot;: &quot;middlename&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;&quot;,&#xd;
			&quot;target&quot;: &quot;usertype&quot;,&#xd;
			&quot;transform&quot;: {&#xd;
				&quot;type&quot;: &quot;text/javascript&quot;,&#xd;
				&quot;source&quot;: &quot;&apos;Преподаватель&apos;&quot;&#xd;
			}&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping XML create" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;mapName&quot;: &quot;xml_connectorAuto_create&quot;,&#xd;
	&quot;mapType&quot;: &quot;provision&quot;,&#xd;
	&quot;mapDesc&quot;: &quot;rf_xml to xml&quot;,&#xd;
	&quot;mapSource&quot;: &quot;resform/XML1&quot;,&#xd;
	&quot;mapTarget&quot;: &quot;connector/auto&quot;,&#xd;
	&quot;mapBody&quot;: {&#xd;
		&quot;policies&quot;: [],&#xd;
		&quot;properties&quot;: [{&#xd;
			&quot;source&quot;: &quot;lastname&quot;,&#xd;
			&quot;target&quot;: &quot;lastname&quot;&#xd;
		}, {&#xd;
			&quot;action&quot;: &quot;create&quot;,&#xd;
			&quot;source&quot;: &quot;firstname&quot;,&#xd;
			&quot;target&quot;: &quot;firstname&quot;&#xd;
		}, {&#xd;
			&quot;action&quot;: &quot;update&quot;,&#xd;
			&quot;source&quot;: &quot;middlename&quot;,&#xd;
			&quot;target&quot;: &quot;middlename&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;username&quot;,&#xd;
			&quot;target&quot;: &quot;username&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;password&quot;,&#xd;
			&quot;target&quot;: &quot;password&quot;,&#xd;
			&quot;transform&quot;: {&#xd;
				&quot;type&quot;: &quot;text/javascript&quot;,&#xd;
				&quot;source&quot;: &quot;openidm.decrypt(source)&quot;&#xd;
			}&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;usertype&quot;,&#xd;
			&quot;target&quot;: &quot;usertype&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;date&quot;,&#xd;
			&quot;target&quot;: &quot;date&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;time&quot;,&#xd;
			&quot;target&quot;: &quot;time&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;age&quot;,&#xd;
			&quot;target&quot;: &quot;age&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;administrator&quot;,&#xd;
			&quot;target&quot;: &quot;administrator&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;_id&quot;,&#xd;
			&quot;target&quot;: &quot;_id&quot;&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping XML-&gt;connector/auto update" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;mapName&quot;: &quot;xml_connectorAuto_update&quot;,&#xd;
	&quot;mapType&quot;: &quot;recon&quot;,&#xd;
	&quot;mapDesc&quot;: &quot;rf_xml to xml&quot;,&#xd;
	&quot;mapSource&quot;: &quot;resform/XML1&quot;,&#xd;
	&quot;mapTarget&quot;: &quot;connector/auto&quot;,&#xd;
	&quot;mapBody&quot;: {&#xd;
		&quot;policies&quot;: [],&#xd;
		&quot;properties&quot;: [{&#xd;
			&quot;source&quot;: &quot;lastname&quot;,&#xd;
			&quot;target&quot;: &quot;lastname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;firstname&quot;,&#xd;
			&quot;target&quot;: &quot;firstname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;middlename&quot;,&#xd;
			&quot;target&quot;: &quot;middlename&quot;&#xd;
		}, {&#xd;
			&quot;action&quot;: &quot;update&quot;,&#xd;
			&quot;source&quot;: &quot;username&quot;,&#xd;
			&quot;target&quot;: &quot;username&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;password&quot;,&#xd;
			&quot;target&quot;: &quot;password&quot;,&#xd;
			&quot;transform&quot;: {&#xd;
				&quot;type&quot;: &quot;text/javascript&quot;,&#xd;
				&quot;source&quot;: &quot;openidm.decrypt(source)&quot;&#xd;
			}&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;usertype&quot;,&#xd;
			&quot;target&quot;: &quot;usertype&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;date&quot;,&#xd;
			&quot;target&quot;: &quot;date&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;time&quot;,&#xd;
			&quot;target&quot;: &quot;time&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;age&quot;,&#xd;
			&quot;target&quot;: &quot;age&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;administrator&quot;,&#xd;
			&quot;target&quot;: &quot;administrator&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;_id&quot;,&#xd;
			&quot;target&quot;: &quot;_id&quot;&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping LDAP pre-pop MUST FAIL" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;mapName&quot;: &quot;prepop_xldap1&quot;,&#xd;
	&quot;mapType&quot;: &quot;prepopulate&quot;,&#xd;
	&quot;mapDesc&quot;: &quot;pre-pop ldap&quot;,&#xd;
	&quot;mapSource&quot;: &quot;managed/user&quot;,&#xd;
	&quot;mapTarget&quot;: &quot;resform/LDAP1&quot;,&#xd;
	&quot;mapBody&quot;: {&#xd;
		&quot;policies&quot;: [],&#xd;
		&quot;properties&quot;: [{&#xd;
			&quot;source&quot;: &quot;userName&quot;,&#xd;
			&quot;target&quot;: &quot;uid&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;&quot;,&#xd;
			&quot;target&quot;: &quot;dn&quot;,&#xd;
			&quot;transform&quot;: {&#xd;
				&quot;type&quot;: &quot;text/javascript&quot;,&#xd;
				&quot;source&quot;: &quot;&apos;uid=&apos;+source.userName+&apos;,ou=People,dc=vagrant,dc=loc&apos;&quot;&#xd;
			}&#xd;
		}, {&#xd;
			&quot;action&quot;: &quot;create&quot;,&#xd;
			&quot;source&quot;: &quot;middleName&quot;,&#xd;
			&quot;target&quot;: &quot;givenname&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;lastName&quot;,&#xd;
			&quot;target&quot;: &quot;sn&quot;&#xd;
		}, {&#xd;
			&quot;source&quot;: &quot;firstName&quot;,&#xd;
			&quot;target&quot;: &quot;cn&quot;&#xd;
		}]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping LDAP create MUST FAIL" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;mapName&quot;: &quot;ldap_connectorAuto_create&quot;,&#xd;
  &quot;mapType&quot;: &quot;unknown&quot;,&#xd;
  &quot;mapDesc&quot;: &quot;LDAP CREATE&quot;,&#xd;
  &quot;mapSource&quot;: &quot;resform/LDAP1&quot;,&#xd;
  &quot;mapTarget&quot;: &quot;connector/auto&quot;,&#xd;
  &quot;mapBody&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
    ],&#xd;
    &quot;properties&quot;: [&#xd;
      {&#xd;
        &quot;source&quot;: &quot;uid&quot;,&#xd;
        &quot;target&quot;: &quot;uid&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;dn&quot;,&#xd;
        &quot;target&quot;: &quot;dn&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;givenname&quot;,&#xd;
        &quot;target&quot;: &quot;givenName&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;cn&quot;,&#xd;
        &quot;target&quot;: &quot;cn&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;sn&quot;,&#xd;
        &quot;target&quot;: &quot;sn&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create mapping LDAP-&gt;connector/auto update MUST FAIL" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;mapName&quot;: &quot;ldap_connectorAuto_update&quot;,&#xd;
  &quot;mapType&quot;: &quot;recon&quot;,&#xd;
  &quot;mapDesc&quot;: &quot;LDAP UPDATE&quot;,&#xd;
  &quot;mapSource&quot;: &quot;resform/LDAP1&quot;,&#xd;
  &quot;mapTarget&quot;: &quot;connector/auto&quot;,&#xd;
  &quot;mapBody&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
    ],&#xd;
    &quot;properties&quot;: [&#xd;
      {&#xd;
        &quot;source&quot;: &quot;uid&quot;,&#xd;
        &quot;target&quot;: &quot;uid&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;dn&quot;,&#xd;
        &quot;target&quot;: &quot;dn&quot;&#xd;
      },&#xd;
	        {&#xd;
	   &quot;action&quot;: &quot;abrakadabra&quot;,     	&#xd;
        &quot;source&quot;: &quot;givenname&quot;,&#xd;
        &quot;target&quot;: &quot;givenName&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;cn&quot;,&#xd;
        &quot;target&quot;: &quot;cn&quot;&#xd;
      },&#xd;
	        {&#xd;
        &quot;source&quot;: &quot;sn&quot;,&#xd;
        &quot;target&quot;: &quot;sn&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/mapping?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create Resource Type" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1455107449000</longProp>
        <longProp name="ThreadGroup.end_time">1455107449000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateResourceTypeLDAP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;resTypeName&quot;: &quot;LDAP1&quot;,&#xd;
	&quot;resTypeDesc&quot;: &quot;OpenLDAP1&quot;,&#xd;
	&quot;resTypeBody&quot;: {&#xd;
		&quot;type&quot;: &quot;object&quot;,&#xd;
		&quot;order&quot;: [&quot;xsdIcfFilePath&quot;, &quot;xsdFilePath&quot;, &quot;xmlFilePath&quot;],&#xd;
		&quot;id&quot;: &quot;http://jsonschema.net&quot;,&#xd;
		&quot;title&quot;: &quot;LDAP&quot;,&#xd;
		&quot;description&quot;: &quot;LDAP&quot;,&#xd;
		&quot;$schema&quot;: &quot;http://gis.idm/conf/schemas/gisidm/managed&quot;,&#xd;
		&quot;required&quot;: [&quot;xsdIcfFilePath&quot;, &quot;xsdFilePath&quot;, &quot;xmlFilePath&quot;],&#xd;
		&quot;properties&quot;: {&#xd;
			&quot;xmlFilePath&quot;: {&#xd;
				&quot;type&quot;: &quot;string&quot;,&#xd;
				&quot;default&quot;: &quot;&amp;{launcher.project.location}/data/xmlConnectorData.xml&quot;&#xd;
			},&#xd;
			&quot;xsdFilePath&quot;: {&#xd;
				&quot;type&quot;: &quot;string&quot;,&#xd;
				&quot;default&quot;: &quot;&amp;{launcher.project.location}/data/resource-schema-extension.xsd&quot;&#xd;
			},&#xd;
			&quot;xsdIcfFilePath&quot;: {&#xd;
				&quot;type&quot;: &quot;string&quot;,&#xd;
				&quot;default&quot;: &quot;&amp;{launcher.project.location}/data/resource-schema-1.xsd&quot;&#xd;
			}&#xd;
		},&#xd;
		&quot;definitions&quot;: {&#xd;
			&quot;stringArray&quot;: {&#xd;
				&quot;type&quot;: &quot;array&quot;,&#xd;
				&quot;items&quot;: {&#xd;
					&quot;type&quot;: &quot;string&quot;&#xd;
				},&#xd;
				&quot;minItems&quot;: 1,&#xd;
				&quot;uniqueItems&quot;: true&#xd;
			}&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/restype?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateResourceTypeXML" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;resTypeName&quot;: &quot;XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890&quot;,&#xd;
	&quot;resTypeDesc&quot;: &quot;XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890XML1234567890&quot;,&#xd;
	&quot;resTypeBody&quot;: {&#xd;
		&quot;type&quot;: &quot;object&quot;,&#xd;
		&quot;order&quot;: [&quot;xsdIcfFilePath&quot;, &quot;xsdFilePath&quot;, &quot;xmlFilePath&quot;],&#xd;
		&quot;$schema&quot;: &quot;http://gis.idm/conf/schemas/gisidm/managed&quot;,&#xd;
		&quot;order&quot;: [&quot;xsdIcfFilePath&quot;, &quot;xsdFilePath&quot;, &quot;xmlFilePath&quot;],&#xd;
		&quot;id&quot;: &quot;http://jsonschema.net&quot;,&#xd;
		&quot;title&quot;: &quot;XML&quot;,&#xd;
		&quot;description&quot;: &quot;XML&quot;,&#xd;
		&quot;required&quot;: [&quot;xsdIcfFilePath&quot;, &quot;xsdFilePath&quot;, &quot;xmlFilePath&quot;],&#xd;
		&quot;properties&quot;: {&#xd;
			&quot;xmlFilePath&quot;: {&#xd;
				&quot;type&quot;: &quot;string&quot;,&#xd;
				&quot;default&quot;: &quot;&amp;{launcher.project.location}/data/xmlConnectorData.xml&quot;&#xd;
			},&#xd;
			&quot;xsdFilePath&quot;: {&#xd;
				&quot;type&quot;: &quot;string&quot;,&#xd;
				&quot;default&quot;: &quot;&amp;{launcher.project.location}/data/resource-schema-extension.xsd&quot;&#xd;
			},&#xd;
			&quot;xsdIcfFilePath&quot;: {&#xd;
				&quot;type&quot;: &quot;string&quot;,&#xd;
				&quot;default&quot;: &quot;&amp;{launcher.project.location}/data/resource-schema-1.xsd&quot;&#xd;
			}&#xd;
		},&#xd;
		&quot;definitions&quot;: {&#xd;
			&quot;stringArray&quot;: {&#xd;
				&quot;type&quot;: &quot;array&quot;,&#xd;
				&quot;items&quot;: {&#xd;
					&quot;type&quot;: &quot;string&quot;&#xd;
				},&#xd;
				&quot;minItems&quot;: 1,&#xd;
				&quot;uniqueItems&quot;: true&#xd;
			}&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/managed/restype?_action=create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetResourceTypePolicies*" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/policy/managed/restype/*</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetResourceTypePolicies" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">ankey/policy/managed/restype</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters">data</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.Cookiemanager;
import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.samplers.SampleResult;

String code = SampleResult.getResponseCode(201);
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);
if (!found)
{
SampleResult.setSuccessful(false)
SampleResult.setStopTestNow(true)   

}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
import org.apache.jmeter.samplers.SampleResult;

String currentURL=SampleResult.getUrlAsString();
log.info(&quot;currentURL-&quot; + currentURL);
String code = SampleResult.getResponseCode();
log.info(&quot;code-&quot; + code);
boolean found=code.contains(&quot;201&quot;);
log.info(&quot;found-&quot; + found);

if (found)
{
Failure = false;
//prev.setResponseOK();

}
if (!found)
{
SampleResult.setSuccessful(false);
Failure = true;  

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Auth" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1455107449000</longProp>
        <longProp name="ThreadGroup.end_time">1455107449000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get token through authentication" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;username&quot; : &quot;user&quot;,&#xd;
    &quot;password&quot; : &quot;password&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token1_User_JSON</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hello" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/hello</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token1_User_JSON</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">deviceToken</stringProp>
              <stringProp name="Header.value">588665bb9b72bf11881801f8</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">userId</stringProp>
              <stringProp name="Header.value">${id1_User_JSON}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User By Id" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/user/${id1_User_JSON}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Event" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;startDate&quot; : &quot;2016-09-28T11:28:18.159&quot;,&#xd;
    &quot;endDate&quot; : &quot;2016-09-28T11:28:18.159&quot;,&#xd;
    &quot;address&quot; : &quot;Kollontai Street&quot;,&#xd;
    &quot;description&quot; : &quot;Tusa-musa&quot;,&#xd;
    &quot;city&quot; : &quot;Saint-Petersburg&quot;,&#xd;
    &quot;geoLocation&quot; : &quot;-63.99171, 45.738868&quot;,&#xd;
    &quot;phone&quot; : &quot;+7-921-333-44-55&quot;,&#xd;
    &quot;type&quot; : &quot;Cars&quot;,&#xd;
    &quot;capacity&quot; : 17&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/event</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id_Event_JSON</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceToken</stringProp>
                <stringProp name="Header.value">588665bb9b72bf11881801f9</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userId</stringProp>
                <stringProp name="Header.value">${id1_User_JSON}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create User without any attribute" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/user</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id2_User_JSON</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User By Id" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/user/${id2_User_JSON}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create User" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;mail&quot; : &quot;ivanov.peter@domain.ru&quot;,&#xd;
    &quot;lastName&quot; : &quot;Ivanov&quot;,&#xd;
    &quot;firstName&quot; : &quot;Peter&quot;,&#xd;
    &quot;city&quot; : &quot;Saint-Petersburg&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/user</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id1_User_JSON</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceToken</stringProp>
                <stringProp name="Header.value">588665bb9b72bf11881801f0</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Event" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;startDate&quot; : &quot;2016-08-28T11:28:18.159&quot;,&#xd;
    &quot;endDate&quot; : &quot;2016-08-28T11:28:18.159&quot;,&#xd;
    &quot;address&quot; : &quot;Washington Street&quot;,&#xd;
    &quot;description&quot; : &quot;Final match&quot;,&#xd;
    &quot;city&quot; : &quot;Saint-Petersburg&quot;,&#xd;
    &quot;geoLocation&quot; : &quot;-73.99171, 40.738868&quot;,&#xd;
    &quot;phone&quot; : &quot;+7-911-111-22-33&quot;,&#xd;
    &quot;type&quot; : &quot;Football&quot;,&#xd;
    &quot;capacity&quot; : 15&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/event</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id_Event_JSON</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Event By Id" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/event/${id_Event_JSON}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Join Event" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/event/join/${id_Event_JSON}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceToken</stringProp>
                <stringProp name="Header.value">588665bb9b72bf11881801f0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">userId</stringProp>
                <stringProp name="Header.value">${id2_User_JSON}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Event" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;id&quot; : &quot;${id_Event_JSON}&quot;,&#xd;
    &quot;startDate&quot; : &quot;2016-08-28T12:28:18.159&quot;,&#xd;
    &quot;endDate&quot; : &quot;2016-08-28T12:28:18.159&quot;,&#xd;
    &quot;address&quot; : &quot;Washington DC&quot;,&#xd;
    &quot;description&quot; : &quot;Super Final match&quot;,&#xd;
    &quot;type&quot; : &quot;Football + Hockey&quot;,&#xd;
    &quot;capacity&quot; : 20    &#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/event</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Path PostProcessor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id_Event_JSON</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Event Without Creator" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;creator&quot; : &quot;&quot;,&#xd;
    &quot;startDate&quot; : &quot;2016-08-28T11:28:18.159&quot;,&#xd;
    &quot;endDate&quot; : &quot;2016-08-28T11:28:18.159&quot;,&#xd;
    &quot;address&quot; : &quot;Washington&quot;,&#xd;
    &quot;description&quot; : &quot;Final match&quot;,&#xd;
    &quot;type&quot; : &quot;Football&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${apiPath}/event</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Test 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">C:\TEST\BACKEND\2.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
        <stringProp name="ConstantTimer.delay">500</stringProp>
      </ConstantTimer>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
